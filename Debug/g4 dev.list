
g4 dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079bc  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000818  08007b94  08007b94  00017b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083ac  080083ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080083ac  080083ac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083ac  080083ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083ac  080083ac  000183ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083b0  080083b0  000183b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080083b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000070  08008424  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08008424  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afdc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003921  00000000  00000000  0003b07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  0003e9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b0  00000000  00000000  00040118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022aae  00000000  00000000  000416c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b3fa  00000000  00000000  00064176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ded29  00000000  00000000  0007f570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e299  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006454  00000000  00000000  0015e2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007b7c 	.word	0x08007b7c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08007b7c 	.word	0x08007b7c

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2220      	movs	r2, #32
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f007 f8c3 	bl	8007a28 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008a2:	4b32      	ldr	r3, [pc, #200]	; (800096c <MX_ADC1_Init+0xe8>)
 80008a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008aa:	4b30      	ldr	r3, [pc, #192]	; (800096c <MX_ADC1_Init+0xe8>)
 80008ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008b2:	4b2e      	ldr	r3, [pc, #184]	; (800096c <MX_ADC1_Init+0xe8>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b8:	4b2c      	ldr	r3, [pc, #176]	; (800096c <MX_ADC1_Init+0xe8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80008be:	4b2b      	ldr	r3, [pc, #172]	; (800096c <MX_ADC1_Init+0xe8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <MX_ADC1_Init+0xe8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008ca:	4b28      	ldr	r3, [pc, #160]	; (800096c <MX_ADC1_Init+0xe8>)
 80008cc:	2208      	movs	r2, #8
 80008ce:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008d0:	4b26      	ldr	r3, [pc, #152]	; (800096c <MX_ADC1_Init+0xe8>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008d6:	4b25      	ldr	r3, [pc, #148]	; (800096c <MX_ADC1_Init+0xe8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80008dc:	4b23      	ldr	r3, [pc, #140]	; (800096c <MX_ADC1_Init+0xe8>)
 80008de:	2201      	movs	r2, #1
 80008e0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008e2:	4b22      	ldr	r3, [pc, #136]	; (800096c <MX_ADC1_Init+0xe8>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ea:	4b20      	ldr	r3, [pc, #128]	; (800096c <MX_ADC1_Init+0xe8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <MX_ADC1_Init+0xe8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_ADC1_Init+0xe8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008fe:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_ADC1_Init+0xe8>)
 8000900:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000904:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_ADC1_Init+0xe8>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800090e:	4817      	ldr	r0, [pc, #92]	; (800096c <MX_ADC1_Init+0xe8>)
 8000910:	f001 fe80 	bl	8002614 <HAL_ADC_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800091a:	f000 fe80 	bl	800161e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000926:	4619      	mov	r1, r3
 8000928:	4810      	ldr	r0, [pc, #64]	; (800096c <MX_ADC1_Init+0xe8>)
 800092a:	f002 fe35 	bl	8003598 <HAL_ADCEx_MultiModeConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000934:	f000 fe73 	bl	800161e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000938:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <MX_ADC1_Init+0xec>)
 800093a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800093c:	2306      	movs	r3, #6
 800093e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000944:	237f      	movs	r3, #127	; 0x7f
 8000946:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000948:	2304      	movs	r3, #4
 800094a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_ADC1_Init+0xe8>)
 8000956:	f002 f983 	bl	8002c60 <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000960:	f000 fe5d 	bl	800161e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	3730      	adds	r7, #48	; 0x30
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000008c 	.word	0x2000008c
 8000970:	04300002 	.word	0x04300002

08000974 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800097a:	463b      	mov	r3, r7
 800097c:	2220      	movs	r2, #32
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f007 f851 	bl	8007a28 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000986:	4b32      	ldr	r3, [pc, #200]	; (8000a50 <MX_ADC2_Init+0xdc>)
 8000988:	4a32      	ldr	r2, [pc, #200]	; (8000a54 <MX_ADC2_Init+0xe0>)
 800098a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800098c:	4b30      	ldr	r3, [pc, #192]	; (8000a50 <MX_ADC2_Init+0xdc>)
 800098e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000992:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000994:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <MX_ADC2_Init+0xdc>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800099a:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <MX_ADC2_Init+0xdc>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80009a0:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <MX_ADC2_Init+0xdc>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009a6:	4b2a      	ldr	r3, [pc, #168]	; (8000a50 <MX_ADC2_Init+0xdc>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ac:	4b28      	ldr	r3, [pc, #160]	; (8000a50 <MX_ADC2_Init+0xdc>)
 80009ae:	2204      	movs	r2, #4
 80009b0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009b2:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <MX_ADC2_Init+0xdc>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009b8:	4b25      	ldr	r3, [pc, #148]	; (8000a50 <MX_ADC2_Init+0xdc>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80009be:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <MX_ADC2_Init+0xdc>)
 80009c0:	2202      	movs	r2, #2
 80009c2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009c4:	4b22      	ldr	r3, [pc, #136]	; (8000a50 <MX_ADC2_Init+0xdc>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009cc:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <MX_ADC2_Init+0xdc>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009d2:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <MX_ADC2_Init+0xdc>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80009d8:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <MX_ADC2_Init+0xdc>)
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <MX_ADC2_Init+0xdc>)
 80009e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80009e8:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <MX_ADC2_Init+0xdc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009f0:	4817      	ldr	r0, [pc, #92]	; (8000a50 <MX_ADC2_Init+0xdc>)
 80009f2:	f001 fe0f 	bl	8002614 <HAL_ADC_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 80009fc:	f000 fe0f 	bl	800161e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_ADC2_Init+0xe4>)
 8000a02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a04:	2306      	movs	r3, #6
 8000a06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a0c:	237f      	movs	r3, #127	; 0x7f
 8000a0e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a10:	2304      	movs	r3, #4
 8000a12:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480c      	ldr	r0, [pc, #48]	; (8000a50 <MX_ADC2_Init+0xdc>)
 8000a1e:	f002 f91f 	bl	8002c60 <HAL_ADC_ConfigChannel>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000a28:	f000 fdf9 	bl	800161e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <MX_ADC2_Init+0xe8>)
 8000a2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a30:	230c      	movs	r3, #12
 8000a32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a34:	463b      	mov	r3, r7
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_ADC2_Init+0xdc>)
 8000a3a:	f002 f911 	bl	8002c60 <HAL_ADC_ConfigChannel>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8000a44:	f000 fdeb 	bl	800161e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	3720      	adds	r7, #32
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200000f8 	.word	0x200000f8
 8000a54:	50000100 	.word	0x50000100
 8000a58:	c3290000 	.word	0xc3290000
 8000a5c:	cb8c0000 	.word	0xcb8c0000

08000a60 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b09c      	sub	sp, #112	; 0x70
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a78:	f107 0318 	add.w	r3, r7, #24
 8000a7c:	2244      	movs	r2, #68	; 0x44
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f006 ffd1 	bl	8007a28 <memset>
  if(adcHandle->Instance==ADC1)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a8e:	f040 8083 	bne.w	8000b98 <HAL_ADC_MspInit+0x138>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a98:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a9c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a9e:	f107 0318 	add.w	r3, r7, #24
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f004 fb4e 	bl	8005144 <HAL_RCCEx_PeriphCLKConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000aae:	f000 fdb6 	bl	800161e <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ab2:	4b66      	ldr	r3, [pc, #408]	; (8000c4c <HAL_ADC_MspInit+0x1ec>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	4a64      	ldr	r2, [pc, #400]	; (8000c4c <HAL_ADC_MspInit+0x1ec>)
 8000aba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000abc:	4b63      	ldr	r3, [pc, #396]	; (8000c4c <HAL_ADC_MspInit+0x1ec>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d10b      	bne.n	8000adc <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ac4:	4b62      	ldr	r3, [pc, #392]	; (8000c50 <HAL_ADC_MspInit+0x1f0>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	4a61      	ldr	r2, [pc, #388]	; (8000c50 <HAL_ADC_MspInit+0x1f0>)
 8000aca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad0:	4b5f      	ldr	r3, [pc, #380]	; (8000c50 <HAL_ADC_MspInit+0x1f0>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	4b5c      	ldr	r3, [pc, #368]	; (8000c50 <HAL_ADC_MspInit+0x1f0>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae0:	4a5b      	ldr	r2, [pc, #364]	; (8000c50 <HAL_ADC_MspInit+0x1f0>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae8:	4b59      	ldr	r3, [pc, #356]	; (8000c50 <HAL_ADC_MspInit+0x1f0>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af4:	4b56      	ldr	r3, [pc, #344]	; (8000c50 <HAL_ADC_MspInit+0x1f0>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af8:	4a55      	ldr	r2, [pc, #340]	; (8000c50 <HAL_ADC_MspInit+0x1f0>)
 8000afa:	f043 0302 	orr.w	r3, r3, #2
 8000afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b00:	4b53      	ldr	r3, [pc, #332]	; (8000c50 <HAL_ADC_MspInit+0x1f0>)
 8000b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b10:	2303      	movs	r3, #3
 8000b12:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b22:	f003 fb0b 	bl	800413c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4846      	ldr	r0, [pc, #280]	; (8000c54 <HAL_ADC_MspInit+0x1f4>)
 8000b3c:	f003 fafe 	bl	800413c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b40:	4b45      	ldr	r3, [pc, #276]	; (8000c58 <HAL_ADC_MspInit+0x1f8>)
 8000b42:	4a46      	ldr	r2, [pc, #280]	; (8000c5c <HAL_ADC_MspInit+0x1fc>)
 8000b44:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b46:	4b44      	ldr	r3, [pc, #272]	; (8000c58 <HAL_ADC_MspInit+0x1f8>)
 8000b48:	2205      	movs	r2, #5
 8000b4a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b4c:	4b42      	ldr	r3, [pc, #264]	; (8000c58 <HAL_ADC_MspInit+0x1f8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b52:	4b41      	ldr	r3, [pc, #260]	; (8000c58 <HAL_ADC_MspInit+0x1f8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b58:	4b3f      	ldr	r3, [pc, #252]	; (8000c58 <HAL_ADC_MspInit+0x1f8>)
 8000b5a:	2280      	movs	r2, #128	; 0x80
 8000b5c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b5e:	4b3e      	ldr	r3, [pc, #248]	; (8000c58 <HAL_ADC_MspInit+0x1f8>)
 8000b60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b64:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b66:	4b3c      	ldr	r3, [pc, #240]	; (8000c58 <HAL_ADC_MspInit+0x1f8>)
 8000b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b6e:	4b3a      	ldr	r3, [pc, #232]	; (8000c58 <HAL_ADC_MspInit+0x1f8>)
 8000b70:	2220      	movs	r2, #32
 8000b72:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b74:	4b38      	ldr	r3, [pc, #224]	; (8000c58 <HAL_ADC_MspInit+0x1f8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b7a:	4837      	ldr	r0, [pc, #220]	; (8000c58 <HAL_ADC_MspInit+0x1f8>)
 8000b7c:	f002 fec0 	bl	8003900 <HAL_DMA_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 8000b86:	f000 fd4a 	bl	800161e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a32      	ldr	r2, [pc, #200]	; (8000c58 <HAL_ADC_MspInit+0x1f8>)
 8000b8e:	655a      	str	r2, [r3, #84]	; 0x54
 8000b90:	4a31      	ldr	r2, [pc, #196]	; (8000c58 <HAL_ADC_MspInit+0x1f8>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000b96:	e054      	b.n	8000c42 <HAL_ADC_MspInit+0x1e2>
  else if(adcHandle->Instance==ADC2)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a30      	ldr	r2, [pc, #192]	; (8000c60 <HAL_ADC_MspInit+0x200>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d14f      	bne.n	8000c42 <HAL_ADC_MspInit+0x1e2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ba6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ba8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bac:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bae:	f107 0318 	add.w	r3, r7, #24
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f004 fac6 	bl	8005144 <HAL_RCCEx_PeriphCLKConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_ADC_MspInit+0x162>
      Error_Handler();
 8000bbe:	f000 fd2e 	bl	800161e <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000bc2:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <HAL_ADC_MspInit+0x1ec>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	4a20      	ldr	r2, [pc, #128]	; (8000c4c <HAL_ADC_MspInit+0x1ec>)
 8000bca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <HAL_ADC_MspInit+0x1ec>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d10b      	bne.n	8000bec <HAL_ADC_MspInit+0x18c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <HAL_ADC_MspInit+0x1f0>)
 8000bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd8:	4a1d      	ldr	r2, [pc, #116]	; (8000c50 <HAL_ADC_MspInit+0x1f0>)
 8000bda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be0:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <HAL_ADC_MspInit+0x1f0>)
 8000be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
    hdma_adc2.Instance = DMA1_Channel2;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <HAL_ADC_MspInit+0x204>)
 8000bee:	4a1e      	ldr	r2, [pc, #120]	; (8000c68 <HAL_ADC_MspInit+0x208>)
 8000bf0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_ADC_MspInit+0x204>)
 8000bf4:	2224      	movs	r2, #36	; 0x24
 8000bf6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <HAL_ADC_MspInit+0x204>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_ADC_MspInit+0x204>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000c04:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <HAL_ADC_MspInit+0x204>)
 8000c06:	2280      	movs	r2, #128	; 0x80
 8000c08:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_ADC_MspInit+0x204>)
 8000c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c10:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_ADC_MspInit+0x204>)
 8000c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c18:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_ADC_MspInit+0x204>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_ADC_MspInit+0x204>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000c26:	480f      	ldr	r0, [pc, #60]	; (8000c64 <HAL_ADC_MspInit+0x204>)
 8000c28:	f002 fe6a 	bl	8003900 <HAL_DMA_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_ADC_MspInit+0x1d6>
      Error_Handler();
 8000c32:	f000 fcf4 	bl	800161e <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_ADC_MspInit+0x204>)
 8000c3a:	655a      	str	r2, [r3, #84]	; 0x54
 8000c3c:	4a09      	ldr	r2, [pc, #36]	; (8000c64 <HAL_ADC_MspInit+0x204>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000c42:	bf00      	nop
 8000c44:	3770      	adds	r7, #112	; 0x70
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000224 	.word	0x20000224
 8000c50:	40021000 	.word	0x40021000
 8000c54:	48000400 	.word	0x48000400
 8000c58:	20000164 	.word	0x20000164
 8000c5c:	40020008 	.word	0x40020008
 8000c60:	50000100 	.word	0x50000100
 8000c64:	200001c4 	.word	0x200001c4
 8000c68:	4002001c 	.word	0x4002001c

08000c6c <ps_amt_sample>:
#include "maths.h"
#include "adc.h"



void ps_amt_sample(Encoderstruct *encoder){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(AMT_CS, 0);		//chip select
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7e:	f003 fbdf 	bl	8004440 <HAL_GPIO_WritePin>
	encoder->old_angle = encoder->new_angle;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	609a      	str	r2, [r3, #8]
	encoder->old_count = encoder->new_count;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	889a      	ldrh	r2, [r3, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	805a      	strh	r2, [r3, #2]

	HAL_SPI_Receive(&AMT_SPI, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	2364      	movs	r3, #100	; 0x64
 8000c96:	2201      	movs	r2, #1
 8000c98:	481c      	ldr	r0, [pc, #112]	; (8000d0c <ps_amt_sample+0xa0>)
 8000c9a:	f004 fcee 	bl	800567a <HAL_SPI_Receive>
	while( AMT_SPI.State == HAL_SPI_STATE_BUSY );
 8000c9e:	bf00      	nop
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <ps_amt_sample+0xa0>)
 8000ca2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d0f9      	beq.n	8000ca0 <ps_amt_sample+0x34>
	HAL_GPIO_WritePin(AMT_CS, 1);
 8000cac:	2201      	movs	r2, #1
 8000cae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb6:	f003 fbc3 	bl	8004440 <HAL_GPIO_WritePin>

	encoder->amt_offset = 2312; //0b00100100010000;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f640 1208 	movw	r2, #2312	; 0x908
 8000cc0:	611a      	str	r2, [r3, #16]
	encoder->new_count = ((encoder->spi_rx_word & 0x1FFF)<<1) - encoder->amt_offset;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	f643 73fe 	movw	r3, #16382	; 0x3ffe
 8000cce:	4013      	ands	r3, r2
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	809a      	strh	r2, [r3, #4]
	if (encoder->new_count < 0){
		encoder->new_count = TWO_PI+encoder->new_count;
	}
	encoder->new_angle = (float)encoder->new_count*TWO_PI/fourteen_bits;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	889b      	ldrh	r3, [r3, #4]
 8000ce4:	ee07 3a90 	vmov	s15, r3
 8000ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cec:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000d10 <ps_amt_sample+0xa4>
 8000cf0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cf4:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000d14 <ps_amt_sample+0xa8>
 8000cf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200003f0 	.word	0x200003f0
 8000d10:	40c90fdb 	.word	0x40c90fdb
 8000d14:	46800000 	.word	0x46800000

08000d18 <vbus_sample>:

float vbus_sample(){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000d1c:	480a      	ldr	r0, [pc, #40]	; (8000d48 <vbus_sample+0x30>)
 8000d1e:	f001 fdfd 	bl	800291c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d22:	f04f 31ff 	mov.w	r1, #4294967295
 8000d26:	4808      	ldr	r0, [pc, #32]	; (8000d48 <vbus_sample+0x30>)
 8000d28:	f001 feb4 	bl	8002a94 <HAL_ADC_PollForConversion>
	return HAL_ADC_GetValue(&hadc1)*Vbus_scale;
 8000d2c:	4806      	ldr	r0, [pc, #24]	; (8000d48 <vbus_sample+0x30>)
 8000d2e:	f001 ff89 	bl	8002c44 <HAL_ADC_GetValue>
 8000d32:	ee07 0a90 	vmov	s15, r0
 8000d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d3a:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8000d4c <vbus_sample+0x34>
 8000d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
	//uint16_t VBUS_RAW[1];
    //HAL_ADC_Start_DMA(&hadc1,(uint32_t*)VBUS_RAW,1);
	//return VBUS_RAW[0]*Vbus_scale;
}
 8000d42:	eeb0 0a67 	vmov.f32	s0, s15
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	2000008c 	.word	0x2000008c
 8000d4c:	3c092222 	.word	0x3c092222

08000d50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <MX_DMA_Init+0x60>)
 8000d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d5a:	4a15      	ldr	r2, [pc, #84]	; (8000db0 <MX_DMA_Init+0x60>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	6493      	str	r3, [r2, #72]	; 0x48
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <MX_DMA_Init+0x60>)
 8000d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <MX_DMA_Init+0x60>)
 8000d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d72:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <MX_DMA_Init+0x60>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6493      	str	r3, [r2, #72]	; 0x48
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <MX_DMA_Init+0x60>)
 8000d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	200b      	movs	r0, #11
 8000d8c:	f002 fd83 	bl	8003896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d90:	200b      	movs	r0, #11
 8000d92:	f002 fd9a 	bl	80038ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	200c      	movs	r0, #12
 8000d9c:	f002 fd7b 	bl	8003896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000da0:	200c      	movs	r0, #12
 8000da2:	f002 fd92 	bl	80038ca <HAL_NVIC_EnableIRQ>

}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000

08000db4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000db8:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <MX_FDCAN1_Init+0x84>)
 8000dba:	4a20      	ldr	r2, [pc, #128]	; (8000e3c <MX_FDCAN1_Init+0x88>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_FDCAN1_Init+0x84>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <MX_FDCAN1_Init+0x84>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000dca:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_FDCAN1_Init+0x84>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_FDCAN1_Init+0x84>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_FDCAN1_Init+0x84>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_FDCAN1_Init+0x84>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 12;
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_FDCAN1_Init+0x84>)
 8000de4:	220c      	movs	r2, #12
 8000de6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <MX_FDCAN1_Init+0x84>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_FDCAN1_Init+0x84>)
 8000df0:	220a      	movs	r2, #10
 8000df2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <MX_FDCAN1_Init+0x84>)
 8000df6:	2203      	movs	r2, #3
 8000df8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_FDCAN1_Init+0x84>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <MX_FDCAN1_Init+0x84>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_FDCAN1_Init+0x84>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <MX_FDCAN1_Init+0x84>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_FDCAN1_Init+0x84>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <MX_FDCAN1_Init+0x84>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_FDCAN1_Init+0x84>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <MX_FDCAN1_Init+0x84>)
 8000e26:	f002 ff25 	bl	8003c74 <HAL_FDCAN_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000e30:	f000 fbf5 	bl	800161e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000228 	.word	0x20000228
 8000e3c:	40006400 	.word	0x40006400

08000e40 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b09c      	sub	sp, #112	; 0x70
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e58:	f107 0318 	add.w	r3, r7, #24
 8000e5c:	2244      	movs	r2, #68	; 0x44
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f006 fde1 	bl	8007a28 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a2f      	ldr	r2, [pc, #188]	; (8000f28 <HAL_FDCAN_MspInit+0xe8>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d156      	bne.n	8000f1e <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e74:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e7a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7c:	f107 0318 	add.w	r3, r7, #24
 8000e80:	4618      	mov	r0, r3
 8000e82:	f004 f95f 	bl	8005144 <HAL_RCCEx_PeriphCLKConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000e8c:	f000 fbc7 	bl	800161e <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e90:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <HAL_FDCAN_MspInit+0xec>)
 8000e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e94:	4a25      	ldr	r2, [pc, #148]	; (8000f2c <HAL_FDCAN_MspInit+0xec>)
 8000e96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000e9c:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <HAL_FDCAN_MspInit+0xec>)
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <HAL_FDCAN_MspInit+0xec>)
 8000eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eac:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <HAL_FDCAN_MspInit+0xec>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_FDCAN_MspInit+0xec>)
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <HAL_FDCAN_MspInit+0xec>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec4:	4a19      	ldr	r2, [pc, #100]	; (8000f2c <HAL_FDCAN_MspInit+0xec>)
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_FDCAN_MspInit+0xec>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ed8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000edc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000eea:	2309      	movs	r3, #9
 8000eec:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef8:	f003 f920 	bl	800413c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f00:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f12:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <HAL_FDCAN_MspInit+0xf0>)
 8000f1a:	f003 f90f 	bl	800413c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3770      	adds	r7, #112	; 0x70
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40006400 	.word	0x40006400
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	48000400 	.word	0x48000400

08000f34 <can_rx_init>:
  /* USER CODE END FDCAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void can_rx_init(CANRxMessage *msg){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af02      	add	r7, sp, #8
 8000f3a:	6078      	str	r0, [r7, #4]
	msg->filter.IdType = FDCAN_STANDARD_ID;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterIndex = 0;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterType = FDCAN_FILTER_RANGE;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	63da      	str	r2, [r3, #60]	; 0x3c
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2201      	movs	r2, #1
 8000f52:	641a      	str	r2, [r3, #64]	; 0x40
	msg->filter.FilterID1 = CANID_MASTER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterID2 = CANID_MASTER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	649a      	str	r2, [r3, #72]	; 0x48
	HAL_FDCAN_ConfigFilter(&hfdcan1, &msg->filter);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3334      	adds	r3, #52	; 0x34
 8000f64:	4619      	mov	r1, r3
 8000f66:	4807      	ldr	r0, [pc, #28]	; (8000f84 <can_rx_init+0x50>)
 8000f68:	f002 ffde 	bl	8003f28 <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1,3,3,0,1);
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2300      	movs	r3, #0
 8000f72:	2203      	movs	r2, #3
 8000f74:	2103      	movs	r1, #3
 8000f76:	4803      	ldr	r0, [pc, #12]	; (8000f84 <can_rx_init+0x50>)
 8000f78:	f003 f830 	bl	8003fdc <HAL_FDCAN_ConfigGlobalFilter>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000228 	.word	0x20000228

08000f88 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	msg->tx_header.Identifier = CANID_SLAVE;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2206      	movs	r2, #6
 8000f9a:	615a      	str	r2, [r3, #20]
	msg->tx_header.IdType = FDCAN_STANDARD_ID;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
	msg->tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
	msg->tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
	msg->tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	61da      	str	r2, [r3, #28]
	msg->tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	621a      	str	r2, [r3, #32]
	msg->tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
	msg->tx_header.MessageMarker = 0;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <set_dtc>:
#include "foc.h"
#include "maths.h"
#include "hw_config.h"
#include "tim.h"

void set_dtc(ControllerStruct *controller){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	60fb      	str	r3, [r7, #12]

	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ((htim1.Instance->ARR))*dtc_u);
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <set_dtc+0x94>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff4:	ee07 3a90 	vmov	s15, r3
 8000ff8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ffc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <set_dtc+0x94>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800100c:	ee17 2a90 	vmov	r2, s15
 8001010:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, ((htim1.Instance->ARR))*dtc_v);
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <set_dtc+0x94>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001020:	edd7 7a04 	vldr	s15, [r7, #16]
 8001024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <set_dtc+0x94>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001030:	ee17 2a90 	vmov	r2, s15
 8001034:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, ((htim1.Instance->ARR))*dtc_w);
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <set_dtc+0x94>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103c:	ee07 3a90 	vmov	s15, r3
 8001040:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001044:	edd7 7a03 	vldr	s15, [r7, #12]
 8001048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <set_dtc+0x94>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001054:	ee17 2a90 	vmov	r2, s15
 8001058:	63da      	str	r2, [r3, #60]	; 0x3c

}
 800105a:	bf00      	nop
 800105c:	371c      	adds	r7, #28
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000454 	.word	0x20000454
 800106c:	00000000 	.word	0x00000000

08001070 <abc>:


void abc(float theta, float d, float q, float *a, float *b, float *c){
 8001070:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001074:	b088      	sub	sp, #32
 8001076:	af00      	add	r7, sp, #0
 8001078:	ed87 0a05 	vstr	s0, [r7, #20]
 800107c:	edc7 0a04 	vstr	s1, [r7, #16]
 8001080:	ed87 1a03 	vstr	s2, [r7, #12]
 8001084:	60b8      	str	r0, [r7, #8]
 8001086:	6079      	str	r1, [r7, #4]
 8001088:	603a      	str	r2, [r7, #0]
    float cf = cos_lut(theta);
 800108a:	ed97 0a05 	vldr	s0, [r7, #20]
 800108e:	f000 fba5 	bl	80017dc <cos_lut>
 8001092:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8001096:	ed97 0a05 	vldr	s0, [r7, #20]
 800109a:	f000 fb65 	bl	8001768 <sin_lut>
 800109e:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 80010a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80010a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80010aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ae:	edd7 6a06 	vldr	s13, [r7, #24]
 80010b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 80010c4:	69b8      	ldr	r0, [r7, #24]
 80010c6:	f7ff fb35 	bl	8000734 <__aeabi_f2d>
 80010ca:	a367      	add	r3, pc, #412	; (adr r3, 8001268 <abc+0x1f8>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff f8a2 	bl	8000218 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4614      	mov	r4, r2
 80010da:	461d      	mov	r5, r3
 80010dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80010e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80010e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e8:	ee17 0a90 	vmov	r0, s15
 80010ec:	f7ff fb22 	bl	8000734 <__aeabi_f2d>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4620      	mov	r0, r4
 80010f6:	4629      	mov	r1, r5
 80010f8:	f7ff f9bc 	bl	8000474 <__aeabi_dsub>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4614      	mov	r4, r2
 8001102:	461d      	mov	r5, r3
 8001104:	6938      	ldr	r0, [r7, #16]
 8001106:	f7ff fb15 	bl	8000734 <__aeabi_f2d>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4620      	mov	r0, r4
 8001110:	4629      	mov	r1, r5
 8001112:	f7ff f881 	bl	8000218 <__aeabi_dmul>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4614      	mov	r4, r2
 800111c:	461d      	mov	r5, r3
 800111e:	69f8      	ldr	r0, [r7, #28]
 8001120:	f7ff fb08 	bl	8000734 <__aeabi_f2d>
 8001124:	a352      	add	r3, pc, #328	; (adr r3, 8001270 <abc+0x200>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	f7ff f875 	bl	8000218 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4690      	mov	r8, r2
 8001134:	4699      	mov	r9, r3
 8001136:	edd7 7a06 	vldr	s15, [r7, #24]
 800113a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800113e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001142:	ee17 0a90 	vmov	r0, s15
 8001146:	f7ff faf5 	bl	8000734 <__aeabi_f2d>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4640      	mov	r0, r8
 8001150:	4649      	mov	r1, r9
 8001152:	f7ff f98f 	bl	8000474 <__aeabi_dsub>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4690      	mov	r8, r2
 800115c:	4699      	mov	r9, r3
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f7ff fae8 	bl	8000734 <__aeabi_f2d>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4640      	mov	r0, r8
 800116a:	4649      	mov	r1, r9
 800116c:	f7ff f854 	bl	8000218 <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4620      	mov	r0, r4
 8001176:	4629      	mov	r1, r5
 8001178:	f7ff f97c 	bl	8000474 <__aeabi_dsub>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	f7ff fb2e 	bl	80007e4 <__aeabi_d2f>
 8001188:	4602      	mov	r2, r0
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	601a      	str	r2, [r3, #0]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 800118e:	69b8      	ldr	r0, [r7, #24]
 8001190:	f7ff fad0 	bl	8000734 <__aeabi_f2d>
 8001194:	a336      	add	r3, pc, #216	; (adr r3, 8001270 <abc+0x200>)
 8001196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119a:	f7ff f83d 	bl	8000218 <__aeabi_dmul>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4614      	mov	r4, r2
 80011a4:	461d      	mov	r5, r3
 80011a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80011aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b2:	ee17 0a90 	vmov	r0, s15
 80011b6:	f7ff fabd 	bl	8000734 <__aeabi_f2d>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4620      	mov	r0, r4
 80011c0:	4629      	mov	r1, r5
 80011c2:	f7ff f957 	bl	8000474 <__aeabi_dsub>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4614      	mov	r4, r2
 80011cc:	461d      	mov	r5, r3
 80011ce:	6938      	ldr	r0, [r7, #16]
 80011d0:	f7ff fab0 	bl	8000734 <__aeabi_f2d>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4620      	mov	r0, r4
 80011da:	4629      	mov	r1, r5
 80011dc:	f7ff f81c 	bl	8000218 <__aeabi_dmul>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4614      	mov	r4, r2
 80011e6:	461d      	mov	r5, r3
 80011e8:	69f8      	ldr	r0, [r7, #28]
 80011ea:	f7ff faa3 	bl	8000734 <__aeabi_f2d>
 80011ee:	a31e      	add	r3, pc, #120	; (adr r3, 8001268 <abc+0x1f8>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f7ff f810 	bl	8000218 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4690      	mov	r8, r2
 80011fe:	4699      	mov	r9, r3
 8001200:	edd7 7a06 	vldr	s15, [r7, #24]
 8001204:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800120c:	ee17 0a90 	vmov	r0, s15
 8001210:	f7ff fa90 	bl	8000734 <__aeabi_f2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4640      	mov	r0, r8
 800121a:	4649      	mov	r1, r9
 800121c:	f7ff f92a 	bl	8000474 <__aeabi_dsub>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f7ff fa83 	bl	8000734 <__aeabi_f2d>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4640      	mov	r0, r8
 8001234:	4649      	mov	r1, r9
 8001236:	f7fe ffef 	bl	8000218 <__aeabi_dmul>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4620      	mov	r0, r4
 8001240:	4629      	mov	r1, r5
 8001242:	f7ff f917 	bl	8000474 <__aeabi_dsub>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fac9 	bl	80007e4 <__aeabi_d2f>
 8001252:	4602      	mov	r2, r0
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	601a      	str	r2, [r3, #0]
}
 8001258:	bf00      	nop
 800125a:	3720      	adds	r7, #32
 800125c:	46bd      	mov	sp, r7
 800125e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001262:	bf00      	nop
 8001264:	f3af 8000 	nop.w
 8001268:	e7ec7caf 	.word	0xe7ec7caf
 800126c:	3febb67a 	.word	0x3febb67a
 8001270:	e7ec7caf 	.word	0xe7ec7caf
 8001274:	bfebb67a 	.word	0xbfebb67a

08001278 <svm>:


void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 8001278:	b580      	push	{r7, lr}
 800127a:	ed2d 8b02 	vpush	{d8}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	ed87 0a07 	vstr	s0, [r7, #28]
 8001286:	edc7 0a06 	vstr	s1, [r7, #24]
 800128a:	ed87 1a05 	vstr	s2, [r7, #20]
 800128e:	edc7 1a04 	vstr	s3, [r7, #16]
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 8001298:	ed97 1a04 	vldr	s2, [r7, #16]
 800129c:	edd7 0a05 	vldr	s1, [r7, #20]
 80012a0:	ed97 0a06 	vldr	s0, [r7, #24]
 80012a4:	f000 fa2c 	bl	8001700 <fminf3>
 80012a8:	eeb0 8a40 	vmov.f32	s16, s0
 80012ac:	ed97 1a04 	vldr	s2, [r7, #16]
 80012b0:	edd7 0a05 	vldr	s1, [r7, #20]
 80012b4:	ed97 0a06 	vldr	s0, [r7, #24]
 80012b8:	f000 f9ee 	bl	8001698 <fmaxf3>
 80012bc:	eef0 7a40 	vmov.f32	s15, s0
 80012c0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012cc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + DTC_MID ), DTC_MIN), DTC_MAX);
 80012d0:	ed97 7a06 	vldr	s14, [r7, #24]
 80012d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012e0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80012e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80012e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ec:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80013bc <svm+0x144>
 80012f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012f4:	eddf 0a32 	vldr	s1, [pc, #200]	; 80013c0 <svm+0x148>
 80012f8:	eeb0 0a67 	vmov.f32	s0, s15
 80012fc:	f000 f994 	bl	8001628 <fast_fmaxf>
 8001300:	eef0 7a40 	vmov.f32	s15, s0
 8001304:	eddf 0a2f 	vldr	s1, [pc, #188]	; 80013c4 <svm+0x14c>
 8001308:	eeb0 0a67 	vmov.f32	s0, s15
 800130c:	f000 f9a8 	bl	8001660 <fast_fminf>
 8001310:	eef0 7a40 	vmov.f32	s15, s0
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + DTC_MID ), DTC_MIN), DTC_MAX);
 800131a:	ed97 7a05 	vldr	s14, [r7, #20]
 800131e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001326:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800132a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800132e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001336:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80013bc <svm+0x144>
 800133a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800133e:	eddf 0a20 	vldr	s1, [pc, #128]	; 80013c0 <svm+0x148>
 8001342:	eeb0 0a67 	vmov.f32	s0, s15
 8001346:	f000 f96f 	bl	8001628 <fast_fmaxf>
 800134a:	eef0 7a40 	vmov.f32	s15, s0
 800134e:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80013c4 <svm+0x14c>
 8001352:	eeb0 0a67 	vmov.f32	s0, s15
 8001356:	f000 f983 	bl	8001660 <fast_fminf>
 800135a:	eef0 7a40 	vmov.f32	s15, s0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + DTC_MID ), DTC_MIN), DTC_MAX);
 8001364:	ed97 7a04 	vldr	s14, [r7, #16]
 8001368:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800136c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001370:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001374:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001378:	ed97 7a07 	vldr	s14, [r7, #28]
 800137c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001380:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80013bc <svm+0x144>
 8001384:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001388:	eddf 0a0d 	vldr	s1, [pc, #52]	; 80013c0 <svm+0x148>
 800138c:	eeb0 0a67 	vmov.f32	s0, s15
 8001390:	f000 f94a 	bl	8001628 <fast_fmaxf>
 8001394:	eef0 7a40 	vmov.f32	s15, s0
 8001398:	eddf 0a0a 	vldr	s1, [pc, #40]	; 80013c4 <svm+0x14c>
 800139c:	eeb0 0a67 	vmov.f32	s0, s15
 80013a0:	f000 f95e 	bl	8001660 <fast_fminf>
 80013a4:	eef0 7a40 	vmov.f32	s15, s0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	edc3 7a00 	vstr	s15, [r3]
    }
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	; 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	ecbd 8b02 	vpop	{d8}
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	3ef0a3d7 	.word	0x3ef0a3d7
 80013c0:	00000000 	.word	0x00000000
 80013c4:	3f70a3d7 	.word	0x3f70a3d7

080013c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013de:	4b2f      	ldr	r3, [pc, #188]	; (800149c <MX_GPIO_Init+0xd4>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	4a2e      	ldr	r2, [pc, #184]	; (800149c <MX_GPIO_Init+0xd4>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ea:	4b2c      	ldr	r3, [pc, #176]	; (800149c <MX_GPIO_Init+0xd4>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013f6:	4b29      	ldr	r3, [pc, #164]	; (800149c <MX_GPIO_Init+0xd4>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	4a28      	ldr	r2, [pc, #160]	; (800149c <MX_GPIO_Init+0xd4>)
 80013fc:	f043 0320 	orr.w	r3, r3, #32
 8001400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001402:	4b26      	ldr	r3, [pc, #152]	; (800149c <MX_GPIO_Init+0xd4>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	f003 0320 	and.w	r3, r3, #32
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	4b23      	ldr	r3, [pc, #140]	; (800149c <MX_GPIO_Init+0xd4>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	4a22      	ldr	r2, [pc, #136]	; (800149c <MX_GPIO_Init+0xd4>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <MX_GPIO_Init+0xd4>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <MX_GPIO_Init+0xd4>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	4a1c      	ldr	r2, [pc, #112]	; (800149c <MX_GPIO_Init+0xd4>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <MX_GPIO_Init+0xd4>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	2140      	movs	r1, #64	; 0x40
 8001442:	4817      	ldr	r0, [pc, #92]	; (80014a0 <MX_GPIO_Init+0xd8>)
 8001444:	f002 fffc 	bl	8004440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800144e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001452:	f002 fff5 	bl	8004440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001456:	2340      	movs	r3, #64	; 0x40
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <MX_GPIO_Init+0xd8>)
 800146e:	f002 fe65 	bl	800413c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148e:	f002 fe55 	bl	800413c <HAL_GPIO_Init>

}
 8001492:	bf00      	nop
 8001494:	3728      	adds	r7, #40	; 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	48000800 	.word	0x48000800

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a8:	f000 fdf5 	bl	8002096 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ac:	f000 f86e 	bl	800158c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  can_rx_init(&can_rx);
 80014b0:	482d      	ldr	r0, [pc, #180]	; (8001568 <main+0xc4>)
 80014b2:	f7ff fd3f 	bl	8000f34 <can_rx_init>
  can_tx_init(&can_tx);
 80014b6:	482d      	ldr	r0, [pc, #180]	; (800156c <main+0xc8>)
 80014b8:	f7ff fd66 	bl	8000f88 <can_tx_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014bc:	f7ff ff84 	bl	80013c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80014c0:	f7ff fc46 	bl	8000d50 <MX_DMA_Init>
  MX_ADC1_Init();
 80014c4:	f7ff f9de 	bl	8000884 <MX_ADC1_Init>
  MX_TIM1_Init();
 80014c8:	f000 fbf8 	bl	8001cbc <MX_TIM1_Init>
  MX_TIM2_Init();
 80014cc:	f000 fcbe 	bl	8001e4c <MX_TIM2_Init>
  MX_SPI1_Init();
 80014d0:	f000 fa9c 	bl	8001a0c <MX_SPI1_Init>
  MX_FDCAN1_Init();
 80014d4:	f7ff fc6e 	bl	8000db4 <MX_FDCAN1_Init>
  MX_ADC2_Init();
 80014d8:	f7ff fa4c 	bl	8000974 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 80014dc:	f000 f996 	bl	800180c <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 80014e0:	f000 f9c2 	bl	8001868 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 80014e4:	f000 f9ee 	bl	80018c4 <MX_OPAMP3_Init>
  /* USER CODE BEGIN 2 */

  HAL_FDCAN_Start(&hfdcan1); //start CAN
 80014e8:	4821      	ldr	r0, [pc, #132]	; (8001570 <main+0xcc>)
 80014ea:	f002 fda8 	bl	800403e <HAL_FDCAN_Start>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1); //status
 80014ee:	2201      	movs	r2, #1
 80014f0:	2140      	movs	r1, #64	; 0x40
 80014f2:	4820      	ldr	r0, [pc, #128]	; (8001574 <main+0xd0>)
 80014f4:	f002 ffa4 	bl	8004440 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim1);
 80014f8:	481f      	ldr	r0, [pc, #124]	; (8001578 <main+0xd4>)
 80014fa:	f004 fe8d 	bl	8006218 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 80014fe:	481f      	ldr	r0, [pc, #124]	; (800157c <main+0xd8>)
 8001500:	f004 fe28 	bl	8006154 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001504:	2100      	movs	r1, #0
 8001506:	481c      	ldr	r0, [pc, #112]	; (8001578 <main+0xd4>)
 8001508:	f004 ff52 	bl	80063b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800150c:	2104      	movs	r1, #4
 800150e:	481a      	ldr	r0, [pc, #104]	; (8001578 <main+0xd4>)
 8001510:	f004 ff4e 	bl	80063b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001514:	2108      	movs	r1, #8
 8001516:	4818      	ldr	r0, [pc, #96]	; (8001578 <main+0xd4>)
 8001518:	f004 ff4a 	bl	80063b0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800151c:	2100      	movs	r1, #0
 800151e:	4816      	ldr	r0, [pc, #88]	; (8001578 <main+0xd4>)
 8001520:	f006 f82a 	bl	8007578 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001524:	2104      	movs	r1, #4
 8001526:	4814      	ldr	r0, [pc, #80]	; (8001578 <main+0xd4>)
 8001528:	f006 f826 	bl	8007578 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800152c:	2108      	movs	r1, #8
 800152e:	4812      	ldr	r0, [pc, #72]	; (8001578 <main+0xd4>)
 8001530:	f006 f822 	bl	8007578 <HAL_TIMEx_PWMN_Start>

 // __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,8000);
 // __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 100);
 // __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,100);

  HAL_GPIO_WritePin(AMT_CS, 1);	//encoder chip select high
 8001534:	2201      	movs	r2, #1
 8001536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800153a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153e:	f002 ff7f 	bl	8004440 <HAL_GPIO_WritePin>
	 //raw = HAL_ADC_GetValue(&hadc1);
	 //HAL_Delay(100);
	 //ps_amt_sample(&AMT_struct);
	 //HAL_Delay(100);

	  controller.v_q = -0.9f;
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <main+0xdc>)
 8001544:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <main+0xe0>)
 8001546:	615a      	str	r2, [r3, #20]
	  //controller.v_d = 0.0f;
	  //HAL_Delay(200);
	  controller.v_d = 0.0f;
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <main+0xdc>)
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
	  HAL_Delay(1000);
 8001550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001554:	f000 fe10 	bl	8002178 <HAL_Delay>
	  controller.v_q = 0.9f;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <main+0xdc>)
 800155a:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <main+0xe4>)
 800155c:	615a      	str	r2, [r3, #20]
	  HAL_Delay(1000);
 800155e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001562:	f000 fe09 	bl	8002178 <HAL_Delay>
	  controller.v_q = -0.9f;
 8001566:	e7ec      	b.n	8001542 <main+0x9e>
 8001568:	200002cc 	.word	0x200002cc
 800156c:	200002a0 	.word	0x200002a0
 8001570:	20000228 	.word	0x20000228
 8001574:	48000800 	.word	0x48000800
 8001578:	20000454 	.word	0x20000454
 800157c:	200004a0 	.word	0x200004a0
 8001580:	20000318 	.word	0x20000318
 8001584:	bf666666 	.word	0xbf666666
 8001588:	3f666666 	.word	0x3f666666

0800158c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b094      	sub	sp, #80	; 0x50
 8001590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	f107 0318 	add.w	r3, r7, #24
 8001596:	2238      	movs	r2, #56	; 0x38
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f006 fa44 	bl	8007a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80015ae:	2000      	movs	r0, #0
 80015b0:	f003 f82e 	bl	8004610 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b4:	2301      	movs	r3, #1
 80015b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015bc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015be:	2302      	movs	r3, #2
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c2:	2303      	movs	r3, #3
 80015c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80015c6:	2302      	movs	r3, #2
 80015c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80015ca:	2354      	movs	r3, #84	; 0x54
 80015cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ce:	2302      	movs	r3, #2
 80015d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015d2:	2302      	movs	r3, #2
 80015d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015d6:	2302      	movs	r3, #2
 80015d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015da:	f107 0318 	add.w	r3, r7, #24
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 f8ba 	bl	8004758 <HAL_RCC_OscConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <SystemClock_Config+0x62>
  {
    Error_Handler();
 80015ea:	f000 f818 	bl	800161e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ee:	230f      	movs	r3, #15
 80015f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f2:	2303      	movs	r3, #3
 80015f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	2104      	movs	r1, #4
 8001606:	4618      	mov	r0, r3
 8001608:	f003 fbb8 	bl	8004d7c <HAL_RCC_ClockConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001612:	f000 f804 	bl	800161e <Error_Handler>
  }
}
 8001616:	bf00      	nop
 8001618:	3750      	adds	r7, #80	; 0x50
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001622:	b672      	cpsid	i
}
 8001624:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001626:	e7fe      	b.n	8001626 <Error_Handler+0x8>

08001628 <fast_fmaxf>:

#include "maths.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001632:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8001636:	ed97 7a01 	vldr	s14, [r7, #4]
 800163a:	edd7 7a00 	vldr	s15, [r7]
 800163e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001646:	dd01      	ble.n	800164c <fast_fmaxf+0x24>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	e000      	b.n	800164e <fast_fmaxf+0x26>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	ee07 3a90 	vmov	s15, r3
    }
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <fast_fminf>:

float fast_fminf(float x, float y){
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	ed87 0a01 	vstr	s0, [r7, #4]
 800166a:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 800166e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001672:	edd7 7a00 	vldr	s15, [r7]
 8001676:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800167a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167e:	d501      	bpl.n	8001684 <fast_fminf+0x24>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	e000      	b.n	8001686 <fast_fminf+0x26>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	ee07 3a90 	vmov	s15, r3
    }
 800168a:	eeb0 0a67 	vmov.f32	s0, s15
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <fmaxf3>:

float fmaxf3(float x, float y, float z){
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	ed87 0a03 	vstr	s0, [r7, #12]
 80016a2:	edc7 0a02 	vstr	s1, [r7, #8]
 80016a6:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 80016aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80016ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80016b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ba:	dd0c      	ble.n	80016d6 <fmaxf3+0x3e>
 80016bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80016c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016cc:	dd01      	ble.n	80016d2 <fmaxf3+0x3a>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	e00d      	b.n	80016ee <fmaxf3+0x56>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	e00b      	b.n	80016ee <fmaxf3+0x56>
 80016d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80016da:	edd7 7a01 	vldr	s15, [r7, #4]
 80016de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	dd01      	ble.n	80016ec <fmaxf3+0x54>
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	e000      	b.n	80016ee <fmaxf3+0x56>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	ee07 3a90 	vmov	s15, r3
    }
 80016f2:	eeb0 0a67 	vmov.f32	s0, s15
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <fminf3>:

float fminf3(float x, float y, float z){
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	ed87 0a03 	vstr	s0, [r7, #12]
 800170a:	edc7 0a02 	vstr	s1, [r7, #8]
 800170e:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8001712:	ed97 7a03 	vldr	s14, [r7, #12]
 8001716:	edd7 7a02 	vldr	s15, [r7, #8]
 800171a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800171e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001722:	d50c      	bpl.n	800173e <fminf3+0x3e>
 8001724:	ed97 7a03 	vldr	s14, [r7, #12]
 8001728:	edd7 7a01 	vldr	s15, [r7, #4]
 800172c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001734:	d501      	bpl.n	800173a <fminf3+0x3a>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	e00d      	b.n	8001756 <fminf3+0x56>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	e00b      	b.n	8001756 <fminf3+0x56>
 800173e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001742:	edd7 7a01 	vldr	s15, [r7, #4]
 8001746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174e:	d501      	bpl.n	8001754 <fminf3+0x54>
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	e000      	b.n	8001756 <fminf3+0x56>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	ee07 3a90 	vmov	s15, r3
    }
 800175a:	eeb0 0a67 	vmov.f32	s0, s15
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <sin_lut>:

float sin_lut(float theta){
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta,TWO_PI);
 8001772:	eddf 0a17 	vldr	s1, [pc, #92]	; 80017d0 <sin_lut+0x68>
 8001776:	ed97 0a01 	vldr	s0, [r7, #4]
 800177a:	f006 f95d 	bl	8007a38 <fmodf>
 800177e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI : theta;
 8001782:	edd7 7a01 	vldr	s15, [r7, #4]
 8001786:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800178a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178e:	d506      	bpl.n	800179e <sin_lut+0x36>
 8001790:	edd7 7a01 	vldr	s15, [r7, #4]
 8001794:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80017d0 <sin_lut+0x68>
 8001798:	ee77 7a87 	vadd.f32	s15, s15, s14
 800179c:	e001      	b.n	80017a2 <sin_lut+0x3a>
 800179e:	edd7 7a01 	vldr	s15, [r7, #4]
 80017a2:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int)(sin_lut_mult*theta)];
 80017a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017aa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80017d4 <sin_lut+0x6c>
 80017ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b6:	ee17 3a90 	vmov	r3, s15
 80017ba:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <sin_lut+0x70>)
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	ee07 3a90 	vmov	s15, r3
}
 80017c6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40c90fdb 	.word	0x40c90fdb
 80017d4:	42a2f983 	.word	0x42a2f983
 80017d8:	08007b94 	.word	0x08007b94

080017dc <cos_lut>:

float cos_lut(float theta){
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_TWO - theta);
 80017e6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001808 <cos_lut+0x2c>
 80017ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f2:	eeb0 0a67 	vmov.f32	s0, s15
 80017f6:	f7ff ffb7 	bl	8001768 <sin_lut>
 80017fa:	eef0 7a40 	vmov.f32	s15, s0
}
 80017fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	3fc90fdb 	.word	0x3fc90fdb

0800180c <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <MX_OPAMP1_Init+0x54>)
 8001812:	4a14      	ldr	r2, [pc, #80]	; (8001864 <MX_OPAMP1_Init+0x58>)
 8001814:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_OPAMP1_Init+0x54>)
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <MX_OPAMP1_Init+0x54>)
 800181e:	2240      	movs	r2, #64	; 0x40
 8001820:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_OPAMP1_Init+0x54>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8001828:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <MX_OPAMP1_Init+0x54>)
 800182a:	2201      	movs	r2, #1
 800182c:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_OPAMP1_Init+0x54>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <MX_OPAMP1_Init+0x54>)
 8001836:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800183a:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <MX_OPAMP1_Init+0x54>)
 800183e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_OPAMP1_Init+0x54>)
 8001846:	2200      	movs	r2, #0
 8001848:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_OPAMP1_Init+0x54>)
 800184c:	f002 fe10 	bl	8004470 <HAL_OPAMP_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8001856:	f7ff fee2 	bl	800161e <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	2000033c 	.word	0x2000033c
 8001864:	40010300 	.word	0x40010300

08001868 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <MX_OPAMP2_Init+0x54>)
 800186e:	4a14      	ldr	r2, [pc, #80]	; (80018c0 <MX_OPAMP2_Init+0x58>)
 8001870:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <MX_OPAMP2_Init+0x54>)
 8001874:	2280      	movs	r2, #128	; 0x80
 8001876:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8001878:	4b10      	ldr	r3, [pc, #64]	; (80018bc <MX_OPAMP2_Init+0x54>)
 800187a:	2240      	movs	r2, #64	; 0x40
 800187c:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800187e:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <MX_OPAMP2_Init+0x54>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8001884:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <MX_OPAMP2_Init+0x54>)
 8001886:	2201      	movs	r2, #1
 8001888:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <MX_OPAMP2_Init+0x54>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <MX_OPAMP2_Init+0x54>)
 8001892:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001896:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <MX_OPAMP2_Init+0x54>)
 800189a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800189e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <MX_OPAMP2_Init+0x54>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <MX_OPAMP2_Init+0x54>)
 80018a8:	f002 fde2 	bl	8004470 <HAL_OPAMP_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 80018b2:	f7ff feb4 	bl	800161e <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000378 	.word	0x20000378
 80018c0:	40010304 	.word	0x40010304

080018c4 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <MX_OPAMP3_Init+0x54>)
 80018ca:	4a14      	ldr	r2, [pc, #80]	; (800191c <MX_OPAMP3_Init+0x58>)
 80018cc:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <MX_OPAMP3_Init+0x54>)
 80018d0:	2280      	movs	r2, #128	; 0x80
 80018d2:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <MX_OPAMP3_Init+0x54>)
 80018d6:	2240      	movs	r2, #64	; 0x40
 80018d8:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_OPAMP3_Init+0x54>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 80018e0:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <MX_OPAMP3_Init+0x54>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_OPAMP3_Init+0x54>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <MX_OPAMP3_Init+0x54>)
 80018ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <MX_OPAMP3_Init+0x54>)
 80018f6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_OPAMP3_Init+0x54>)
 80018fe:	2200      	movs	r2, #0
 8001900:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001902:	4805      	ldr	r0, [pc, #20]	; (8001918 <MX_OPAMP3_Init+0x54>)
 8001904:	f002 fdb4 	bl	8004470 <HAL_OPAMP_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 800190e:	f7ff fe86 	bl	800161e <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200003b4 	.word	0x200003b4
 800191c:	40010308 	.word	0x40010308

08001920 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a2e      	ldr	r2, [pc, #184]	; (80019f8 <HAL_OPAMP_MspInit+0xd8>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d119      	bne.n	8001976 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <HAL_OPAMP_MspInit+0xdc>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	4a2d      	ldr	r2, [pc, #180]	; (80019fc <HAL_OPAMP_MspInit+0xdc>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194e:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_OPAMP_MspInit+0xdc>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800195a:	230a      	movs	r3, #10
 800195c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800195e:	2303      	movs	r3, #3
 8001960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001970:	f002 fbe4 	bl	800413c <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8001974:	e03b      	b.n	80019ee <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a21      	ldr	r2, [pc, #132]	; (8001a00 <HAL_OPAMP_MspInit+0xe0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d119      	bne.n	80019b4 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001980:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <HAL_OPAMP_MspInit+0xdc>)
 8001982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001984:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <HAL_OPAMP_MspInit+0xdc>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <HAL_OPAMP_MspInit+0xdc>)
 800198e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001998:	23a0      	movs	r3, #160	; 0xa0
 800199a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800199c:	2303      	movs	r3, #3
 800199e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ae:	f002 fbc5 	bl	800413c <HAL_GPIO_Init>
}
 80019b2:	e01c      	b.n	80019ee <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <HAL_OPAMP_MspInit+0xe4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d117      	bne.n	80019ee <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_OPAMP_MspInit+0xdc>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <HAL_OPAMP_MspInit+0xdc>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_OPAMP_MspInit+0xdc>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80019d6:	2305      	movs	r3, #5
 80019d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019da:	2303      	movs	r3, #3
 80019dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	4807      	ldr	r0, [pc, #28]	; (8001a08 <HAL_OPAMP_MspInit+0xe8>)
 80019ea:	f002 fba7 	bl	800413c <HAL_GPIO_Init>
}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	; 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40010300 	.word	0x40010300
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40010304 	.word	0x40010304
 8001a04:	40010308 	.word	0x40010308
 8001a08:	48000400 	.word	0x48000400

08001a0c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <MX_SPI1_Init+0x74>)
 8001a12:	4a1c      	ldr	r2, [pc, #112]	; (8001a84 <MX_SPI1_Init+0x78>)
 8001a14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a16:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <MX_SPI1_Init+0x74>)
 8001a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <MX_SPI1_Init+0x74>)
 8001a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a24:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <MX_SPI1_Init+0x74>)
 8001a28:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001a2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a2e:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <MX_SPI1_Init+0x74>)
 8001a30:	2202      	movs	r2, #2
 8001a32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <MX_SPI1_Init+0x74>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_SPI1_Init+0x74>)
 8001a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001a42:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_SPI1_Init+0x74>)
 8001a44:	2230      	movs	r2, #48	; 0x30
 8001a46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a48:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <MX_SPI1_Init+0x74>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_SPI1_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <MX_SPI1_Init+0x74>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_SPI1_Init+0x74>)
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <MX_SPI1_Init+0x74>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_SPI1_Init+0x74>)
 8001a68:	2208      	movs	r2, #8
 8001a6a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <MX_SPI1_Init+0x74>)
 8001a6e:	f003 fd59 	bl	8005524 <HAL_SPI_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001a78:	f7ff fdd1 	bl	800161e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200003f0 	.word	0x200003f0
 8001a84:	40013000 	.word	0x40013000

08001a88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a17      	ldr	r2, [pc, #92]	; (8001b04 <HAL_SPI_MspInit+0x7c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d127      	bne.n	8001afa <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_SPI_MspInit+0x80>)
 8001aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aae:	4a16      	ldr	r2, [pc, #88]	; (8001b08 <HAL_SPI_MspInit+0x80>)
 8001ab0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ab4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <HAL_SPI_MspInit+0x80>)
 8001ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_SPI_MspInit+0x80>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	4a10      	ldr	r2, [pc, #64]	; (8001b08 <HAL_SPI_MspInit+0x80>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_SPI_MspInit+0x80>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001ada:	2318      	movs	r3, #24
 8001adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aea:	2305      	movs	r3, #5
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	4805      	ldr	r0, [pc, #20]	; (8001b0c <HAL_SPI_MspInit+0x84>)
 8001af6:	f002 fb21 	bl	800413c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001afa:	bf00      	nop
 8001afc:	3728      	adds	r7, #40	; 0x28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40013000 	.word	0x40013000
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	48000400 	.word	0x48000400

08001b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <HAL_MspInit+0x44>)
 8001b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <HAL_MspInit+0x44>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6613      	str	r3, [r2, #96]	; 0x60
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_MspInit+0x44>)
 8001b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_MspInit+0x44>)
 8001b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b32:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <HAL_MspInit+0x44>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	6593      	str	r3, [r2, #88]	; 0x58
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_MspInit+0x44>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <NMI_Handler+0x4>

08001b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b62:	e7fe      	b.n	8001b62 <HardFault_Handler+0x4>

08001b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <MemManage_Handler+0x4>

08001b6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <BusFault_Handler+0x4>

08001b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <UsageFault_Handler+0x4>

08001b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba4:	f000 faca 	bl	800213c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <DMA1_Channel1_IRQHandler+0x10>)
 8001bb2:	f001 ff4d 	bl	8003a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000164 	.word	0x20000164

08001bc0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <DMA1_Channel2_IRQHandler+0x10>)
 8001bc6:	f001 ff43 	bl	8003a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200001c4 	.word	0x200001c4

08001bd4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0

	float theta;
	//theta = 0.0f;
	//theta = __HAL_TIM_GET_COUNTER(&htim2)*TWO_PI/10000;

    ps_amt_sample(&AMT_struct);
 8001bda:	4826      	ldr	r0, [pc, #152]	; (8001c74 <TIM1_UP_TIM16_IRQHandler+0xa0>)
 8001bdc:	f7ff f846 	bl	8000c6c <ps_amt_sample>
    theta = fmodf(AMT_struct.new_angle*PPairs,TWO_PI);
 8001be0:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <TIM1_UP_TIM16_IRQHandler+0xa0>)
 8001be2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001be6:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001bea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bee:	eddf 0a22 	vldr	s1, [pc, #136]	; 8001c78 <TIM1_UP_TIM16_IRQHandler+0xa4>
 8001bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf6:	f005 ff1f 	bl	8007a38 <fmodf>
 8001bfa:	ed87 0a01 	vstr	s0, [r7, #4]

	controller.v_bus = vbus_sample();
 8001bfe:	f7ff f88b 	bl	8000d18 <vbus_sample>
 8001c02:	eef0 7a40 	vmov.f32	s15, s0
 8001c06:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <TIM1_UP_TIM16_IRQHandler+0xa8>)
 8001c08:	edc3 7a03 	vstr	s15, [r3, #12]

    abc(theta,controller.v_d,controller.v_q,&controller.v_u,&controller.v_v,&controller.v_w);
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <TIM1_UP_TIM16_IRQHandler+0xa8>)
 8001c0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <TIM1_UP_TIM16_IRQHandler+0xa8>)
 8001c14:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c18:	4a19      	ldr	r2, [pc, #100]	; (8001c80 <TIM1_UP_TIM16_IRQHandler+0xac>)
 8001c1a:	491a      	ldr	r1, [pc, #104]	; (8001c84 <TIM1_UP_TIM16_IRQHandler+0xb0>)
 8001c1c:	4817      	ldr	r0, [pc, #92]	; (8001c7c <TIM1_UP_TIM16_IRQHandler+0xa8>)
 8001c1e:	eeb0 1a47 	vmov.f32	s2, s14
 8001c22:	eef0 0a67 	vmov.f32	s1, s15
 8001c26:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c2a:	f7ff fa21 	bl	8001070 <abc>
    svm(controller.v_bus,controller.v_u,controller.v_v,controller.v_w,&controller.dtc_u,&controller.dtc_v,&controller.dtc_w);
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <TIM1_UP_TIM16_IRQHandler+0xa8>)
 8001c30:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <TIM1_UP_TIM16_IRQHandler+0xa8>)
 8001c36:	ed93 7a00 	vldr	s14, [r3]
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <TIM1_UP_TIM16_IRQHandler+0xa8>)
 8001c3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <TIM1_UP_TIM16_IRQHandler+0xa8>)
 8001c42:	ed93 6a02 	vldr	s12, [r3, #8]
 8001c46:	4a10      	ldr	r2, [pc, #64]	; (8001c88 <TIM1_UP_TIM16_IRQHandler+0xb4>)
 8001c48:	4910      	ldr	r1, [pc, #64]	; (8001c8c <TIM1_UP_TIM16_IRQHandler+0xb8>)
 8001c4a:	4811      	ldr	r0, [pc, #68]	; (8001c90 <TIM1_UP_TIM16_IRQHandler+0xbc>)
 8001c4c:	eef0 1a46 	vmov.f32	s3, s12
 8001c50:	eeb0 1a66 	vmov.f32	s2, s13
 8001c54:	eef0 0a47 	vmov.f32	s1, s14
 8001c58:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5c:	f7ff fb0c 	bl	8001278 <svm>
    set_dtc(&controller);
 8001c60:	4806      	ldr	r0, [pc, #24]	; (8001c7c <TIM1_UP_TIM16_IRQHandler+0xa8>)
 8001c62:	f7ff f9b7 	bl	8000fd4 <set_dtc>

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c66:	480b      	ldr	r0, [pc, #44]	; (8001c94 <TIM1_UP_TIM16_IRQHandler+0xc0>)
 8001c68:	f004 fca2 	bl	80065b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	2000028c 	.word	0x2000028c
 8001c78:	40c90fdb 	.word	0x40c90fdb
 8001c7c:	20000318 	.word	0x20000318
 8001c80:	20000320 	.word	0x20000320
 8001c84:	2000031c 	.word	0x2000031c
 8001c88:	20000338 	.word	0x20000338
 8001c8c:	20000334 	.word	0x20000334
 8001c90:	20000330 	.word	0x20000330
 8001c94:	20000454 	.word	0x20000454

08001c98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <SystemInit+0x20>)
 8001c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca2:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <SystemInit+0x20>)
 8001ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b09c      	sub	sp, #112	; 0x70
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cdc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
 8001cec:	615a      	str	r2, [r3, #20]
 8001cee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2234      	movs	r2, #52	; 0x34
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f005 fe96 	bl	8007a28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cfc:	4b51      	ldr	r3, [pc, #324]	; (8001e44 <MX_TIM1_Init+0x188>)
 8001cfe:	4a52      	ldr	r2, [pc, #328]	; (8001e48 <MX_TIM1_Init+0x18c>)
 8001d00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d02:	4b50      	ldr	r3, [pc, #320]	; (8001e44 <MX_TIM1_Init+0x188>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001d08:	4b4e      	ldr	r3, [pc, #312]	; (8001e44 <MX_TIM1_Init+0x188>)
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400;
 8001d0e:	4b4d      	ldr	r3, [pc, #308]	; (8001e44 <MX_TIM1_Init+0x188>)
 8001d10:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001d14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d16:	4b4b      	ldr	r3, [pc, #300]	; (8001e44 <MX_TIM1_Init+0x188>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001d1c:	4b49      	ldr	r3, [pc, #292]	; (8001e44 <MX_TIM1_Init+0x188>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d22:	4b48      	ldr	r3, [pc, #288]	; (8001e44 <MX_TIM1_Init+0x188>)
 8001d24:	2280      	movs	r2, #128	; 0x80
 8001d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d28:	4846      	ldr	r0, [pc, #280]	; (8001e44 <MX_TIM1_Init+0x188>)
 8001d2a:	f004 f9bb 	bl	80060a4 <HAL_TIM_Base_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001d34:	f7ff fc73 	bl	800161e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d3e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d42:	4619      	mov	r1, r3
 8001d44:	483f      	ldr	r0, [pc, #252]	; (8001e44 <MX_TIM1_Init+0x188>)
 8001d46:	f004 fe97 	bl	8006a78 <HAL_TIM_ConfigClockSource>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001d50:	f7ff fc65 	bl	800161e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d54:	483b      	ldr	r0, [pc, #236]	; (8001e44 <MX_TIM1_Init+0x188>)
 8001d56:	f004 fac9 	bl	80062ec <HAL_TIM_PWM_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001d60:	f7ff fc5d 	bl	800161e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d64:	2300      	movs	r3, #0
 8001d66:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d74:	4619      	mov	r1, r3
 8001d76:	4833      	ldr	r0, [pc, #204]	; (8001e44 <MX_TIM1_Init+0x188>)
 8001d78:	f005 fcb2 	bl	80076e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001d82:	f7ff fc4c 	bl	800161e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d86:	2360      	movs	r3, #96	; 0x60
 8001d88:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d92:	2300      	movs	r3, #0
 8001d94:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001da2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001da6:	2200      	movs	r2, #0
 8001da8:	4619      	mov	r1, r3
 8001daa:	4826      	ldr	r0, [pc, #152]	; (8001e44 <MX_TIM1_Init+0x188>)
 8001dac:	f004 fd50 	bl	8006850 <HAL_TIM_PWM_ConfigChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001db6:	f7ff fc32 	bl	800161e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4820      	ldr	r0, [pc, #128]	; (8001e44 <MX_TIM1_Init+0x188>)
 8001dc4:	f004 fd44 	bl	8006850 <HAL_TIM_PWM_ConfigChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001dce:	f7ff fc26 	bl	800161e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	4619      	mov	r1, r3
 8001dda:	481a      	ldr	r0, [pc, #104]	; (8001e44 <MX_TIM1_Init+0x188>)
 8001ddc:	f004 fd38 	bl	8006850 <HAL_TIM_PWM_ConfigChannel>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001de6:	f7ff fc1a 	bl	800161e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 8001df6:	2364      	movs	r3, #100	; 0x64
 8001df8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e02:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e14:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	4619      	mov	r1, r3
 8001e26:	4807      	ldr	r0, [pc, #28]	; (8001e44 <MX_TIM1_Init+0x188>)
 8001e28:	f005 fcdc 	bl	80077e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001e32:	f7ff fbf4 	bl	800161e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e36:	4803      	ldr	r0, [pc, #12]	; (8001e44 <MX_TIM1_Init+0x188>)
 8001e38:	f000 f88e 	bl	8001f58 <HAL_TIM_MspPostInit>

}
 8001e3c:	bf00      	nop
 8001e3e:	3770      	adds	r7, #112	; 0x70
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000454 	.word	0x20000454
 8001e48:	40012c00 	.word	0x40012c00

08001e4c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <MX_TIM2_Init+0x98>)
 8001e6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16800-1;
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <MX_TIM2_Init+0x98>)
 8001e74:	f244 129f 	movw	r2, #16799	; 0x419f
 8001e78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <MX_TIM2_Init+0x98>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <MX_TIM2_Init+0x98>)
 8001e82:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e88:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <MX_TIM2_Init+0x98>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <MX_TIM2_Init+0x98>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e94:	4813      	ldr	r0, [pc, #76]	; (8001ee4 <MX_TIM2_Init+0x98>)
 8001e96:	f004 f905 	bl	80060a4 <HAL_TIM_Base_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001ea0:	f7ff fbbd 	bl	800161e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eaa:	f107 0310 	add.w	r3, r7, #16
 8001eae:	4619      	mov	r1, r3
 8001eb0:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <MX_TIM2_Init+0x98>)
 8001eb2:	f004 fde1 	bl	8006a78 <HAL_TIM_ConfigClockSource>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001ebc:	f7ff fbaf 	bl	800161e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_TIM2_Init+0x98>)
 8001ece:	f005 fc07 	bl	80076e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001ed8:	f7ff fba1 	bl	800161e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001edc:	bf00      	nop
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	200004a0 	.word	0x200004a0

08001ee8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a16      	ldr	r2, [pc, #88]	; (8001f50 <HAL_TIM_Base_MspInit+0x68>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d114      	bne.n	8001f24 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001efa:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <HAL_TIM_Base_MspInit+0x6c>)
 8001efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efe:	4a15      	ldr	r2, [pc, #84]	; (8001f54 <HAL_TIM_Base_MspInit+0x6c>)
 8001f00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f04:	6613      	str	r3, [r2, #96]	; 0x60
 8001f06:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <HAL_TIM_Base_MspInit+0x6c>)
 8001f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	2019      	movs	r0, #25
 8001f18:	f001 fcbd 	bl	8003896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001f1c:	2019      	movs	r0, #25
 8001f1e:	f001 fcd4 	bl	80038ca <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f22:	e010      	b.n	8001f46 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2c:	d10b      	bne.n	8001f46 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_TIM_Base_MspInit+0x6c>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f32:	4a08      	ldr	r2, [pc, #32]	; (8001f54 <HAL_TIM_Base_MspInit+0x6c>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6593      	str	r3, [r2, #88]	; 0x58
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_TIM_Base_MspInit+0x6c>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40012c00 	.word	0x40012c00
 8001f54:	40021000 	.word	0x40021000

08001f58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a2f      	ldr	r2, [pc, #188]	; (8002034 <HAL_TIM_MspPostInit+0xdc>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d157      	bne.n	800202a <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7a:	4b2f      	ldr	r3, [pc, #188]	; (8002038 <HAL_TIM_MspPostInit+0xe0>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	4a2e      	ldr	r2, [pc, #184]	; (8002038 <HAL_TIM_MspPostInit+0xe0>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f86:	4b2c      	ldr	r3, [pc, #176]	; (8002038 <HAL_TIM_MspPostInit+0xe0>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f92:	4b29      	ldr	r3, [pc, #164]	; (8002038 <HAL_TIM_MspPostInit+0xe0>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	4a28      	ldr	r2, [pc, #160]	; (8002038 <HAL_TIM_MspPostInit+0xe0>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9e:	4b26      	ldr	r3, [pc, #152]	; (8002038 <HAL_TIM_MspPostInit+0xe0>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	4b23      	ldr	r3, [pc, #140]	; (8002038 <HAL_TIM_MspPostInit+0xe0>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	4a22      	ldr	r2, [pc, #136]	; (8002038 <HAL_TIM_MspPostInit+0xe0>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_TIM_MspPostInit+0xe0>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001fc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4817      	ldr	r0, [pc, #92]	; (800203c <HAL_TIM_MspPostInit+0xe4>)
 8001fe0:	f002 f8ac 	bl	800413c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fe4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	480f      	ldr	r0, [pc, #60]	; (8002040 <HAL_TIM_MspPostInit+0xe8>)
 8002002:	f002 f89b 	bl	800413c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8002006:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 800200a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002018:	2306      	movs	r3, #6
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	4619      	mov	r1, r3
 8002022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002026:	f002 f889 	bl	800413c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800202a:	bf00      	nop
 800202c:	3728      	adds	r7, #40	; 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40012c00 	.word	0x40012c00
 8002038:	40021000 	.word	0x40021000
 800203c:	48000800 	.word	0x48000800
 8002040:	48000400 	.word	0x48000400

08002044 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
          	  ldr   r0, =_estack
 8002044:	480d      	ldr	r0, [pc, #52]	; (800207c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002046:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002048:	f7ff fe26 	bl	8001c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800204c:	480c      	ldr	r0, [pc, #48]	; (8002080 <LoopForever+0x6>)
  ldr r1, =_edata
 800204e:	490d      	ldr	r1, [pc, #52]	; (8002084 <LoopForever+0xa>)
   ldr r2, =_sidata
 8002050:	4a0d      	ldr	r2, [pc, #52]	; (8002088 <LoopForever+0xe>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002054:	e002      	b.n	800205c <LoopCopyDataInit>

08002056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800205a:	3304      	adds	r3, #4

0800205c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800205c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002060:	d3f9      	bcc.n	8002056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002062:	4a0a      	ldr	r2, [pc, #40]	; (800208c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002064:	4c0a      	ldr	r4, [pc, #40]	; (8002090 <LoopForever+0x16>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002068:	e001      	b.n	800206e <LoopFillZerobss>

0800206a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800206a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800206c:	3204      	adds	r2, #4

0800206e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002070:	d3fb      	bcc.n	800206a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002072:	f005 fcb5 	bl	80079e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002076:	f7ff fa15 	bl	80014a4 <main>

0800207a <LoopForever>:

LoopForever:
    b LoopForever
 800207a:	e7fe      	b.n	800207a <LoopForever>
          	  ldr   r0, =_estack
 800207c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002084:	20000070 	.word	0x20000070
   ldr r2, =_sidata
 8002088:	080083b4 	.word	0x080083b4
  ldr r2, =_sbss
 800208c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002090:	200004f0 	.word	0x200004f0

08002094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002094:	e7fe      	b.n	8002094 <ADC1_2_IRQHandler>

08002096 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a0:	2003      	movs	r0, #3
 80020a2:	f001 fbed 	bl	8003880 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020a6:	200f      	movs	r0, #15
 80020a8:	f000 f80e 	bl	80020c8 <HAL_InitTick>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	71fb      	strb	r3, [r7, #7]
 80020b6:	e001      	b.n	80020bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020b8:	f7ff fd2a 	bl	8001b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020bc:	79fb      	ldrb	r3, [r7, #7]

}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80020d4:	4b16      	ldr	r3, [pc, #88]	; (8002130 <HAL_InitTick+0x68>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d022      	beq.n	8002122 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80020dc:	4b15      	ldr	r3, [pc, #84]	; (8002134 <HAL_InitTick+0x6c>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b13      	ldr	r3, [pc, #76]	; (8002130 <HAL_InitTick+0x68>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f0:	4618      	mov	r0, r3
 80020f2:	f001 fbf8 	bl	80038e6 <HAL_SYSTICK_Config>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10f      	bne.n	800211c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	d809      	bhi.n	8002116 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002102:	2200      	movs	r2, #0
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	f04f 30ff 	mov.w	r0, #4294967295
 800210a:	f001 fbc4 	bl	8003896 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <HAL_InitTick+0x70>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	e007      	b.n	8002126 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	73fb      	strb	r3, [r7, #15]
 800211a:	e004      	b.n	8002126 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
 8002120:	e001      	b.n	8002126 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002126:	7bfb      	ldrb	r3, [r7, #15]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000008 	.word	0x20000008
 8002134:	20000000 	.word	0x20000000
 8002138:	20000004 	.word	0x20000004

0800213c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_IncTick+0x1c>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <HAL_IncTick+0x20>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4413      	add	r3, r2
 800214a:	4a03      	ldr	r2, [pc, #12]	; (8002158 <HAL_IncTick+0x1c>)
 800214c:	6013      	str	r3, [r2, #0]
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	200004ec 	.word	0x200004ec
 800215c:	20000008 	.word	0x20000008

08002160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return uwTick;
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <HAL_GetTick+0x14>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	200004ec 	.word	0x200004ec

08002178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002180:	f7ff ffee 	bl	8002160 <HAL_GetTick>
 8002184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002190:	d004      	beq.n	800219c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_Delay+0x40>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4413      	add	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800219c:	bf00      	nop
 800219e:	f7ff ffdf 	bl	8002160 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d8f7      	bhi.n	800219e <HAL_Delay+0x26>
  {
  }
}
 80021ae:	bf00      	nop
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000008 	.word	0x20000008

080021bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	609a      	str	r2, [r3, #8]
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	609a      	str	r2, [r3, #8]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3360      	adds	r3, #96	; 0x60
 8002236:	461a      	mov	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <LL_ADC_SetOffset+0x44>)
 8002246:	4013      	ands	r3, r2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	4313      	orrs	r3, r2
 8002254:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800225c:	bf00      	nop
 800225e:	371c      	adds	r7, #28
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	03fff000 	.word	0x03fff000

0800226c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3360      	adds	r3, #96	; 0x60
 800227a:	461a      	mov	r2, r3
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3360      	adds	r3, #96	; 0x60
 80022a8:	461a      	mov	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	431a      	orrs	r2, r3
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022c2:	bf00      	nop
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b087      	sub	sp, #28
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	3360      	adds	r3, #96	; 0x60
 80022de:	461a      	mov	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	431a      	orrs	r2, r3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80022f8:	bf00      	nop
 80022fa:	371c      	adds	r7, #28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002304:	b480      	push	{r7}
 8002306:	b087      	sub	sp, #28
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3360      	adds	r3, #96	; 0x60
 8002314:	461a      	mov	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	431a      	orrs	r2, r3
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800232e:	bf00      	nop
 8002330:	371c      	adds	r7, #28
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	615a      	str	r2, [r3, #20]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002386:	b480      	push	{r7}
 8002388:	b087      	sub	sp, #28
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3330      	adds	r3, #48	; 0x30
 8002396:	461a      	mov	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	4413      	add	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	211f      	movs	r1, #31
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	401a      	ands	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	f003 011f 	and.w	r1, r3, #31
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	fa01 f303 	lsl.w	r3, r1, r3
 80023cc:	431a      	orrs	r2, r3
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023d2:	bf00      	nop
 80023d4:	371c      	adds	r7, #28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023de:	b480      	push	{r7}
 80023e0:	b087      	sub	sp, #28
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3314      	adds	r3, #20
 80023ee:	461a      	mov	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	0e5b      	lsrs	r3, r3, #25
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	4413      	add	r3, r2
 80023fc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	0d1b      	lsrs	r3, r3, #20
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	2107      	movs	r1, #7
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	401a      	ands	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	0d1b      	lsrs	r3, r3, #20
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	431a      	orrs	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002428:	bf00      	nop
 800242a:	371c      	adds	r7, #28
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244c:	43db      	mvns	r3, r3
 800244e:	401a      	ands	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f003 0318 	and.w	r3, r3, #24
 8002456:	4908      	ldr	r1, [pc, #32]	; (8002478 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002458:	40d9      	lsrs	r1, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	400b      	ands	r3, r1
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	431a      	orrs	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	0007ffff 	.word	0x0007ffff

0800247c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 031f 	and.w	r3, r3, #31
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80024c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6093      	str	r3, [r2, #8]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024ec:	d101      	bne.n	80024f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002510:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002514:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002538:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800253c:	d101      	bne.n	8002542 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002560:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002564:	f043 0201 	orr.w	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <LL_ADC_IsEnabled+0x18>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <LL_ADC_IsEnabled+0x1a>
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025b2:	f043 0204 	orr.w	r2, r3, #4
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d101      	bne.n	80025de <LL_ADC_REG_IsConversionOngoing+0x18>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d101      	bne.n	8002604 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e167      	b.n	80028fe <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002638:	2b00      	cmp	r3, #0
 800263a:	d109      	bne.n	8002650 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7fe fa0f 	bl	8000a60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff3f 	bl	80024d8 <LL_ADC_IsDeepPowerDownEnabled>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d004      	beq.n	800266a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff25 	bl	80024b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff ff5a 	bl	8002528 <LL_ADC_IsInternalRegulatorEnabled>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d115      	bne.n	80026a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff ff3e 	bl	8002500 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002684:	4ba0      	ldr	r3, [pc, #640]	; (8002908 <HAL_ADC_Init+0x2f4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	099b      	lsrs	r3, r3, #6
 800268a:	4aa0      	ldr	r2, [pc, #640]	; (800290c <HAL_ADC_Init+0x2f8>)
 800268c:	fba2 2303 	umull	r2, r3, r2, r3
 8002690:	099b      	lsrs	r3, r3, #6
 8002692:	3301      	adds	r3, #1
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002698:	e002      	b.n	80026a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3b01      	subs	r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f9      	bne.n	800269a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ff3c 	bl	8002528 <LL_ADC_IsInternalRegulatorEnabled>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10d      	bne.n	80026d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ba:	f043 0210 	orr.w	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c6:	f043 0201 	orr.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ff75 	bl	80025c6 <LL_ADC_REG_IsConversionOngoing>
 80026dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f040 8100 	bne.w	80028ec <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f040 80fc 	bne.w	80028ec <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026fc:	f043 0202 	orr.w	r2, r3, #2
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff35 	bl	8002578 <LL_ADC_IsEnabled>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d111      	bne.n	8002738 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002714:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002718:	f7ff ff2e 	bl	8002578 <LL_ADC_IsEnabled>
 800271c:	4604      	mov	r4, r0
 800271e:	487c      	ldr	r0, [pc, #496]	; (8002910 <HAL_ADC_Init+0x2fc>)
 8002720:	f7ff ff2a 	bl	8002578 <LL_ADC_IsEnabled>
 8002724:	4603      	mov	r3, r0
 8002726:	4323      	orrs	r3, r4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d105      	bne.n	8002738 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4619      	mov	r1, r3
 8002732:	4878      	ldr	r0, [pc, #480]	; (8002914 <HAL_ADC_Init+0x300>)
 8002734:	f7ff fd42 	bl	80021bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	7f5b      	ldrb	r3, [r3, #29]
 800273c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002742:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002748:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800274e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002756:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002762:	2b01      	cmp	r3, #1
 8002764:	d106      	bne.n	8002774 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	3b01      	subs	r3, #1
 800276c:	045b      	lsls	r3, r3, #17
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	2b00      	cmp	r3, #0
 800277a:	d009      	beq.n	8002790 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	4b60      	ldr	r3, [pc, #384]	; (8002918 <HAL_ADC_Init+0x304>)
 8002798:	4013      	ands	r3, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	69b9      	ldr	r1, [r7, #24]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ff14 	bl	80025ec <LL_ADC_INJ_IsConversionOngoing>
 80027c4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d16d      	bne.n	80028a8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d16a      	bne.n	80028a8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027d6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027de:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ee:	f023 0302 	bic.w	r3, r3, #2
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	69b9      	ldr	r1, [r7, #24]
 80027f8:	430b      	orrs	r3, r1
 80027fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d017      	beq.n	8002834 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002812:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800281c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002820:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6911      	ldr	r1, [r2, #16]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	430b      	orrs	r3, r1
 800282e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002832:	e013      	b.n	800285c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002842:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002854:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002858:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002862:	2b01      	cmp	r3, #1
 8002864:	d118      	bne.n	8002898 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002870:	f023 0304 	bic.w	r3, r3, #4
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800287c:	4311      	orrs	r1, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002882:	4311      	orrs	r1, r2
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002888:	430a      	orrs	r2, r1
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0201 	orr.w	r2, r2, #1
 8002894:	611a      	str	r2, [r3, #16]
 8002896:	e007      	b.n	80028a8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0201 	bic.w	r2, r2, #1
 80028a6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10c      	bne.n	80028ca <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f023 010f 	bic.w	r1, r3, #15
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	1e5a      	subs	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
 80028c8:	e007      	b.n	80028da <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 020f 	bic.w	r2, r2, #15
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028de:	f023 0303 	bic.w	r3, r3, #3
 80028e2:	f043 0201 	orr.w	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80028ea:	e007      	b.n	80028fc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f0:	f043 0210 	orr.w	r2, r3, #16
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3724      	adds	r7, #36	; 0x24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd90      	pop	{r4, r7, pc}
 8002906:	bf00      	nop
 8002908:	20000000 	.word	0x20000000
 800290c:	053e2d63 	.word	0x053e2d63
 8002910:	50000100 	.word	0x50000100
 8002914:	50000300 	.word	0x50000300
 8002918:	fff04007 	.word	0xfff04007

0800291c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002924:	4859      	ldr	r0, [pc, #356]	; (8002a8c <HAL_ADC_Start+0x170>)
 8002926:	f7ff fda9 	bl	800247c <LL_ADC_GetMultimode>
 800292a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fe48 	bl	80025c6 <LL_ADC_REG_IsConversionOngoing>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	f040 809f 	bne.w	8002a7c <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_ADC_Start+0x30>
 8002948:	2302      	movs	r3, #2
 800294a:	e09a      	b.n	8002a82 <HAL_ADC_Start+0x166>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 fd73 	bl	8003440 <ADC_Enable>
 800295a:	4603      	mov	r3, r0
 800295c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800295e:	7dfb      	ldrb	r3, [r7, #23]
 8002960:	2b00      	cmp	r3, #0
 8002962:	f040 8086 	bne.w	8002a72 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a44      	ldr	r2, [pc, #272]	; (8002a90 <HAL_ADC_Start+0x174>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d002      	beq.n	800298a <HAL_ADC_Start+0x6e>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	e001      	b.n	800298e <HAL_ADC_Start+0x72>
 800298a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	4293      	cmp	r3, r2
 8002994:	d002      	beq.n	800299c <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d105      	bne.n	80029a8 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b4:	d106      	bne.n	80029c4 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ba:	f023 0206 	bic.w	r2, r3, #6
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	661a      	str	r2, [r3, #96]	; 0x60
 80029c2:	e002      	b.n	80029ca <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	221c      	movs	r2, #28
 80029d0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a2c      	ldr	r2, [pc, #176]	; (8002a90 <HAL_ADC_Start+0x174>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d002      	beq.n	80029ea <HAL_ADC_Start+0xce>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	e001      	b.n	80029ee <HAL_ADC_Start+0xd2>
 80029ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d008      	beq.n	8002a08 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	2b05      	cmp	r3, #5
 8002a00:	d002      	beq.n	8002a08 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	2b09      	cmp	r3, #9
 8002a06:	d114      	bne.n	8002a32 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d007      	beq.n	8002a26 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fdb7 	bl	800259e <LL_ADC_REG_StartConversion>
 8002a30:	e026      	b.n	8002a80 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a13      	ldr	r2, [pc, #76]	; (8002a90 <HAL_ADC_Start+0x174>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d002      	beq.n	8002a4e <HAL_ADC_Start+0x132>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	e001      	b.n	8002a52 <HAL_ADC_Start+0x136>
 8002a4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a52:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00f      	beq.n	8002a80 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a70:	e006      	b.n	8002a80 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002a7a:	e001      	b.n	8002a80 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	50000300 	.word	0x50000300
 8002a90:	50000100 	.word	0x50000100

08002a94 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a9e:	4867      	ldr	r0, [pc, #412]	; (8002c3c <HAL_ADC_PollForConversion+0x1a8>)
 8002aa0:	f7ff fcec 	bl	800247c <LL_ADC_GetMultimode>
 8002aa4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d102      	bne.n	8002ab4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002aae:	2308      	movs	r3, #8
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	e02a      	b.n	8002b0a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d005      	beq.n	8002ac6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	d002      	beq.n	8002ac6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2b09      	cmp	r3, #9
 8002ac4:	d111      	bne.n	8002aea <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	f043 0220 	orr.w	r2, r3, #32
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0a6      	b.n	8002c32 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002ae4:	2304      	movs	r3, #4
 8002ae6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002ae8:	e00f      	b.n	8002b0a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002aea:	4854      	ldr	r0, [pc, #336]	; (8002c3c <HAL_ADC_PollForConversion+0x1a8>)
 8002aec:	f7ff fcd4 	bl	8002498 <LL_ADC_GetMultiDMATransfer>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	f043 0220 	orr.w	r2, r3, #32
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e095      	b.n	8002c32 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b06:	2304      	movs	r3, #4
 8002b08:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b0a:	f7ff fb29 	bl	8002160 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b10:	e021      	b.n	8002b56 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d01d      	beq.n	8002b56 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b1a:	f7ff fb21 	bl	8002160 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d302      	bcc.n	8002b30 <HAL_ADC_PollForConversion+0x9c>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d112      	bne.n	8002b56 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10b      	bne.n	8002b56 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	f043 0204 	orr.w	r2, r3, #4
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e06d      	b.n	8002c32 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0d6      	beq.n	8002b12 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fbf3 	bl	8002360 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01c      	beq.n	8002bba <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	7f5b      	ldrb	r3, [r3, #29]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d118      	bne.n	8002bba <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d111      	bne.n	8002bba <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d105      	bne.n	8002bba <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a20      	ldr	r2, [pc, #128]	; (8002c40 <HAL_ADC_PollForConversion+0x1ac>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d002      	beq.n	8002bca <HAL_ADC_PollForConversion+0x136>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	e001      	b.n	8002bce <HAL_ADC_PollForConversion+0x13a>
 8002bca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d008      	beq.n	8002be8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2b05      	cmp	r3, #5
 8002be0:	d002      	beq.n	8002be8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b09      	cmp	r3, #9
 8002be6:	d104      	bne.n	8002bf2 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	61bb      	str	r3, [r7, #24]
 8002bf0:	e00d      	b.n	8002c0e <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a12      	ldr	r2, [pc, #72]	; (8002c40 <HAL_ADC_PollForConversion+0x1ac>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d002      	beq.n	8002c02 <HAL_ADC_PollForConversion+0x16e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	e001      	b.n	8002c06 <HAL_ADC_PollForConversion+0x172>
 8002c02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c06:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d104      	bne.n	8002c1e <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2208      	movs	r2, #8
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	e008      	b.n	8002c30 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d103      	bne.n	8002c30 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	220c      	movs	r2, #12
 8002c2e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3720      	adds	r7, #32
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	50000300 	.word	0x50000300
 8002c40:	50000100 	.word	0x50000100

08002c44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b0b6      	sub	sp, #216	; 0xd8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x22>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e3c8      	b.n	8003414 <HAL_ADC_ConfigChannel+0x7b4>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff fc99 	bl	80025c6 <LL_ADC_REG_IsConversionOngoing>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f040 83ad 	bne.w	80033f6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	6859      	ldr	r1, [r3, #4]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	f7ff fb6c 	bl	8002386 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fc87 	bl	80025c6 <LL_ADC_REG_IsConversionOngoing>
 8002cb8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fc93 	bl	80025ec <LL_ADC_INJ_IsConversionOngoing>
 8002cc6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 81d9 	bne.w	8003086 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f040 81d4 	bne.w	8003086 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ce6:	d10f      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f7ff fb73 	bl	80023de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fb1a 	bl	800233a <LL_ADC_SetSamplingTimeCommonConfig>
 8002d06:	e00e      	b.n	8002d26 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6819      	ldr	r1, [r3, #0]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	461a      	mov	r2, r3
 8002d16:	f7ff fb62 	bl	80023de <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fb0a 	bl	800233a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	08db      	lsrs	r3, r3, #3
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d022      	beq.n	8002d8e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	6919      	ldr	r1, [r3, #16]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d58:	f7ff fa64 	bl	8002224 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	6919      	ldr	r1, [r3, #16]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	f7ff fab0 	bl	80022ce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d102      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x124>
 8002d7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d82:	e000      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x126>
 8002d84:	2300      	movs	r3, #0
 8002d86:	461a      	mov	r2, r3
 8002d88:	f7ff fabc 	bl	8002304 <LL_ADC_SetOffsetSaturation>
 8002d8c:	e17b      	b.n	8003086 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fa69 	bl	800226c <LL_ADC_GetOffsetChannel>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x15a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fa5e 	bl	800226c <LL_ADC_GetOffsetChannel>
 8002db0:	4603      	mov	r3, r0
 8002db2:	0e9b      	lsrs	r3, r3, #26
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	e01e      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x198>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fa53 	bl	800226c <LL_ADC_GetOffsetChannel>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dd0:	fa93 f3a3 	rbit	r3, r3
 8002dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002dd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ddc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002de0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002de8:	2320      	movs	r3, #32
 8002dea:	e004      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002dec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d105      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x1b0>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	0e9b      	lsrs	r3, r3, #26
 8002e0a:	f003 031f 	and.w	r3, r3, #31
 8002e0e:	e018      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x1e2>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002e24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002e34:	2320      	movs	r3, #32
 8002e36:	e004      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002e38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d106      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fa22 	bl	8002298 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2101      	movs	r1, #1
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fa06 	bl	800226c <LL_ADC_GetOffsetChannel>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10a      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x220>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2101      	movs	r1, #1
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff f9fb 	bl	800226c <LL_ADC_GetOffsetChannel>
 8002e76:	4603      	mov	r3, r0
 8002e78:	0e9b      	lsrs	r3, r3, #26
 8002e7a:	f003 021f 	and.w	r2, r3, #31
 8002e7e:	e01e      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x25e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2101      	movs	r1, #1
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff f9f0 	bl	800226c <LL_ADC_GetOffsetChannel>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002e9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ea6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002eae:	2320      	movs	r3, #32
 8002eb0:	e004      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002eb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d105      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x276>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	0e9b      	lsrs	r3, r3, #26
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	e018      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x2a8>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002eea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002ef2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002efa:	2320      	movs	r3, #32
 8002efc:	e004      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002efe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d106      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2101      	movs	r1, #1
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff f9bf 	bl	8002298 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2102      	movs	r1, #2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff f9a3 	bl	800226c <LL_ADC_GetOffsetChannel>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10a      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x2e6>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2102      	movs	r1, #2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff f998 	bl	800226c <LL_ADC_GetOffsetChannel>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	0e9b      	lsrs	r3, r3, #26
 8002f40:	f003 021f 	and.w	r2, r3, #31
 8002f44:	e01e      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x324>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2102      	movs	r1, #2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff f98d 	bl	800226c <LL_ADC_GetOffsetChannel>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f5c:	fa93 f3a3 	rbit	r3, r3
 8002f60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002f64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002f6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002f74:	2320      	movs	r3, #32
 8002f76:	e004      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002f78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d105      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x33c>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	0e9b      	lsrs	r3, r3, #26
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	e016      	b.n	8002fca <HAL_ADC_ConfigChannel+0x36a>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fa8:	fa93 f3a3 	rbit	r3, r3
 8002fac:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002fae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002fb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002fbc:	2320      	movs	r3, #32
 8002fbe:	e004      	b.n	8002fca <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fc4:	fab3 f383 	clz	r3, r3
 8002fc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d106      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2102      	movs	r1, #2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff f95e 	bl	8002298 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2103      	movs	r1, #3
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff f942 	bl	800226c <LL_ADC_GetOffsetChannel>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x3a8>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2103      	movs	r1, #3
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff f937 	bl	800226c <LL_ADC_GetOffsetChannel>
 8002ffe:	4603      	mov	r3, r0
 8003000:	0e9b      	lsrs	r3, r3, #26
 8003002:	f003 021f 	and.w	r2, r3, #31
 8003006:	e017      	b.n	8003038 <HAL_ADC_ConfigChannel+0x3d8>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2103      	movs	r1, #3
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff f92c 	bl	800226c <LL_ADC_GetOffsetChannel>
 8003014:	4603      	mov	r3, r0
 8003016:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003022:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800302a:	2320      	movs	r3, #32
 800302c:	e003      	b.n	8003036 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800302e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003040:	2b00      	cmp	r3, #0
 8003042:	d105      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x3f0>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	0e9b      	lsrs	r3, r3, #26
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	e011      	b.n	8003074 <HAL_ADC_ConfigChannel+0x414>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003058:	fa93 f3a3 	rbit	r3, r3
 800305c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800305e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003060:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003068:	2320      	movs	r3, #32
 800306a:	e003      	b.n	8003074 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800306c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306e:	fab3 f383 	clz	r3, r3
 8003072:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003074:	429a      	cmp	r2, r3
 8003076:	d106      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2200      	movs	r2, #0
 800307e:	2103      	movs	r1, #3
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff f909 	bl	8002298 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fa74 	bl	8002578 <LL_ADC_IsEnabled>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	f040 8140 	bne.w	8003318 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6818      	ldr	r0, [r3, #0]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	6819      	ldr	r1, [r3, #0]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	461a      	mov	r2, r3
 80030a6:	f7ff f9c5 	bl	8002434 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	4a8f      	ldr	r2, [pc, #572]	; (80032ec <HAL_ADC_ConfigChannel+0x68c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	f040 8131 	bne.w	8003318 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10b      	bne.n	80030de <HAL_ADC_ConfigChannel+0x47e>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	0e9b      	lsrs	r3, r3, #26
 80030cc:	3301      	adds	r3, #1
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	2b09      	cmp	r3, #9
 80030d4:	bf94      	ite	ls
 80030d6:	2301      	movls	r3, #1
 80030d8:	2300      	movhi	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	e019      	b.n	8003112 <HAL_ADC_ConfigChannel+0x4b2>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e6:	fa93 f3a3 	rbit	r3, r3
 80030ea:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80030ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ee:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80030f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80030f6:	2320      	movs	r3, #32
 80030f8:	e003      	b.n	8003102 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80030fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030fc:	fab3 f383 	clz	r3, r3
 8003100:	b2db      	uxtb	r3, r3
 8003102:	3301      	adds	r3, #1
 8003104:	f003 031f 	and.w	r3, r3, #31
 8003108:	2b09      	cmp	r3, #9
 800310a:	bf94      	ite	ls
 800310c:	2301      	movls	r3, #1
 800310e:	2300      	movhi	r3, #0
 8003110:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003112:	2b00      	cmp	r3, #0
 8003114:	d079      	beq.n	800320a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311e:	2b00      	cmp	r3, #0
 8003120:	d107      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x4d2>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	0e9b      	lsrs	r3, r3, #26
 8003128:	3301      	adds	r3, #1
 800312a:	069b      	lsls	r3, r3, #26
 800312c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003130:	e015      	b.n	800315e <HAL_ADC_ConfigChannel+0x4fe>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003142:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800314a:	2320      	movs	r3, #32
 800314c:	e003      	b.n	8003156 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800314e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003150:	fab3 f383 	clz	r3, r3
 8003154:	b2db      	uxtb	r3, r3
 8003156:	3301      	adds	r3, #1
 8003158:	069b      	lsls	r3, r3, #26
 800315a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_ADC_ConfigChannel+0x51e>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	0e9b      	lsrs	r3, r3, #26
 8003170:	3301      	adds	r3, #1
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	2101      	movs	r1, #1
 8003178:	fa01 f303 	lsl.w	r3, r1, r3
 800317c:	e017      	b.n	80031ae <HAL_ADC_ConfigChannel+0x54e>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800318c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800318e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003196:	2320      	movs	r3, #32
 8003198:	e003      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800319a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	3301      	adds	r3, #1
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	2101      	movs	r1, #1
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	ea42 0103 	orr.w	r1, r2, r3
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10a      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x574>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	0e9b      	lsrs	r3, r3, #26
 80031c4:	3301      	adds	r3, #1
 80031c6:	f003 021f 	and.w	r2, r3, #31
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	051b      	lsls	r3, r3, #20
 80031d2:	e018      	b.n	8003206 <HAL_ADC_ConfigChannel+0x5a6>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031dc:	fa93 f3a3 	rbit	r3, r3
 80031e0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80031e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80031ec:	2320      	movs	r3, #32
 80031ee:	e003      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80031f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f2:	fab3 f383 	clz	r3, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	3301      	adds	r3, #1
 80031fa:	f003 021f 	and.w	r2, r3, #31
 80031fe:	4613      	mov	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	4413      	add	r3, r2
 8003204:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003206:	430b      	orrs	r3, r1
 8003208:	e081      	b.n	800330e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003212:	2b00      	cmp	r3, #0
 8003214:	d107      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x5c6>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	0e9b      	lsrs	r3, r3, #26
 800321c:	3301      	adds	r3, #1
 800321e:	069b      	lsls	r3, r3, #26
 8003220:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003224:	e015      	b.n	8003252 <HAL_ADC_ConfigChannel+0x5f2>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003236:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800323e:	2320      	movs	r3, #32
 8003240:	e003      	b.n	800324a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	3301      	adds	r3, #1
 800324c:	069b      	lsls	r3, r3, #26
 800324e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x612>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	0e9b      	lsrs	r3, r3, #26
 8003264:	3301      	adds	r3, #1
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	2101      	movs	r1, #1
 800326c:	fa01 f303 	lsl.w	r3, r1, r3
 8003270:	e017      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x642>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	61fb      	str	r3, [r7, #28]
  return result;
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800328a:	2320      	movs	r3, #32
 800328c:	e003      	b.n	8003296 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	fab3 f383 	clz	r3, r3
 8003294:	b2db      	uxtb	r3, r3
 8003296:	3301      	adds	r3, #1
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	2101      	movs	r1, #1
 800329e:	fa01 f303 	lsl.w	r3, r1, r3
 80032a2:	ea42 0103 	orr.w	r1, r2, r3
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10d      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x66e>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	0e9b      	lsrs	r3, r3, #26
 80032b8:	3301      	adds	r3, #1
 80032ba:	f003 021f 	and.w	r2, r3, #31
 80032be:	4613      	mov	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4413      	add	r3, r2
 80032c4:	3b1e      	subs	r3, #30
 80032c6:	051b      	lsls	r3, r3, #20
 80032c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032cc:	e01e      	b.n	800330c <HAL_ADC_ConfigChannel+0x6ac>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
  return result;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d104      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80032e6:	2320      	movs	r3, #32
 80032e8:	e006      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x698>
 80032ea:	bf00      	nop
 80032ec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	fab3 f383 	clz	r3, r3
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	3301      	adds	r3, #1
 80032fa:	f003 021f 	and.w	r2, r3, #31
 80032fe:	4613      	mov	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	4413      	add	r3, r2
 8003304:	3b1e      	subs	r3, #30
 8003306:	051b      	lsls	r3, r3, #20
 8003308:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800330c:	430b      	orrs	r3, r1
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	6892      	ldr	r2, [r2, #8]
 8003312:	4619      	mov	r1, r3
 8003314:	f7ff f863 	bl	80023de <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b3f      	ldr	r3, [pc, #252]	; (800341c <HAL_ADC_ConfigChannel+0x7bc>)
 800331e:	4013      	ands	r3, r2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d071      	beq.n	8003408 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003324:	483e      	ldr	r0, [pc, #248]	; (8003420 <HAL_ADC_ConfigChannel+0x7c0>)
 8003326:	f7fe ff6f 	bl	8002208 <LL_ADC_GetCommonPathInternalCh>
 800332a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a3c      	ldr	r2, [pc, #240]	; (8003424 <HAL_ADC_ConfigChannel+0x7c4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d004      	beq.n	8003342 <HAL_ADC_ConfigChannel+0x6e2>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a3a      	ldr	r2, [pc, #232]	; (8003428 <HAL_ADC_ConfigChannel+0x7c8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d127      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003342:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003346:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d121      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003356:	d157      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003358:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800335c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003360:	4619      	mov	r1, r3
 8003362:	482f      	ldr	r0, [pc, #188]	; (8003420 <HAL_ADC_ConfigChannel+0x7c0>)
 8003364:	f7fe ff3d 	bl	80021e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003368:	4b30      	ldr	r3, [pc, #192]	; (800342c <HAL_ADC_ConfigChannel+0x7cc>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	099b      	lsrs	r3, r3, #6
 800336e:	4a30      	ldr	r2, [pc, #192]	; (8003430 <HAL_ADC_ConfigChannel+0x7d0>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	099b      	lsrs	r3, r3, #6
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	4613      	mov	r3, r2
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003382:	e002      	b.n	800338a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3b01      	subs	r3, #1
 8003388:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f9      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003390:	e03a      	b.n	8003408 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a27      	ldr	r2, [pc, #156]	; (8003434 <HAL_ADC_ConfigChannel+0x7d4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d113      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800339c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10d      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a22      	ldr	r2, [pc, #136]	; (8003438 <HAL_ADC_ConfigChannel+0x7d8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d02a      	beq.n	8003408 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ba:	4619      	mov	r1, r3
 80033bc:	4818      	ldr	r0, [pc, #96]	; (8003420 <HAL_ADC_ConfigChannel+0x7c0>)
 80033be:	f7fe ff10 	bl	80021e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033c2:	e021      	b.n	8003408 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a1c      	ldr	r2, [pc, #112]	; (800343c <HAL_ADC_ConfigChannel+0x7dc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d11c      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a16      	ldr	r2, [pc, #88]	; (8003438 <HAL_ADC_ConfigChannel+0x7d8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d011      	beq.n	8003408 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033ec:	4619      	mov	r1, r3
 80033ee:	480c      	ldr	r0, [pc, #48]	; (8003420 <HAL_ADC_ConfigChannel+0x7c0>)
 80033f0:	f7fe fef7 	bl	80021e2 <LL_ADC_SetCommonPathInternalCh>
 80033f4:	e008      	b.n	8003408 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fa:	f043 0220 	orr.w	r2, r3, #32
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003410:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003414:	4618      	mov	r0, r3
 8003416:	37d8      	adds	r7, #216	; 0xd8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	80080000 	.word	0x80080000
 8003420:	50000300 	.word	0x50000300
 8003424:	c3210000 	.word	0xc3210000
 8003428:	90c00010 	.word	0x90c00010
 800342c:	20000000 	.word	0x20000000
 8003430:	053e2d63 	.word	0x053e2d63
 8003434:	c7520000 	.word	0xc7520000
 8003438:	50000100 	.word	0x50000100
 800343c:	cb840000 	.word	0xcb840000

08003440 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003448:	2300      	movs	r3, #0
 800344a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff f891 	bl	8002578 <LL_ADC_IsEnabled>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d169      	bne.n	8003530 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	4b36      	ldr	r3, [pc, #216]	; (800353c <ADC_Enable+0xfc>)
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00d      	beq.n	8003486 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346e:	f043 0210 	orr.w	r2, r3, #16
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347a:	f043 0201 	orr.w	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e055      	b.n	8003532 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff f860 	bl	8002550 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003490:	482b      	ldr	r0, [pc, #172]	; (8003540 <ADC_Enable+0x100>)
 8003492:	f7fe feb9 	bl	8002208 <LL_ADC_GetCommonPathInternalCh>
 8003496:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003498:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800349c:	2b00      	cmp	r3, #0
 800349e:	d013      	beq.n	80034c8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034a0:	4b28      	ldr	r3, [pc, #160]	; (8003544 <ADC_Enable+0x104>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	099b      	lsrs	r3, r3, #6
 80034a6:	4a28      	ldr	r2, [pc, #160]	; (8003548 <ADC_Enable+0x108>)
 80034a8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ac:	099b      	lsrs	r3, r3, #6
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	4613      	mov	r3, r2
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034ba:	e002      	b.n	80034c2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	3b01      	subs	r3, #1
 80034c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f9      	bne.n	80034bc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80034c8:	f7fe fe4a 	bl	8002160 <HAL_GetTick>
 80034cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034ce:	e028      	b.n	8003522 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff f84f 	bl	8002578 <LL_ADC_IsEnabled>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d104      	bne.n	80034ea <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff f833 	bl	8002550 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034ea:	f7fe fe39 	bl	8002160 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d914      	bls.n	8003522 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b01      	cmp	r3, #1
 8003504:	d00d      	beq.n	8003522 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350a:	f043 0210 	orr.w	r2, r3, #16
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003516:	f043 0201 	orr.w	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e007      	b.n	8003532 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b01      	cmp	r3, #1
 800352e:	d1cf      	bne.n	80034d0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	8000003f 	.word	0x8000003f
 8003540:	50000300 	.word	0x50000300
 8003544:	20000000 	.word	0x20000000
 8003548:	053e2d63 	.word	0x053e2d63

0800354c <LL_ADC_IsEnabled>:
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <LL_ADC_IsEnabled+0x18>
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <LL_ADC_IsEnabled+0x1a>
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <LL_ADC_REG_IsConversionOngoing>:
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	2b04      	cmp	r3, #4
 8003584:	d101      	bne.n	800358a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b0a1      	sub	sp, #132	; 0x84
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e08b      	b.n	80036ce <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80035be:	2300      	movs	r3, #0
 80035c0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80035c2:	2300      	movs	r3, #0
 80035c4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035ce:	d102      	bne.n	80035d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035d0:	4b41      	ldr	r3, [pc, #260]	; (80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	e001      	b.n	80035da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10b      	bne.n	80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e06a      	b.n	80036ce <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff ffb9 	bl	8003572 <LL_ADC_REG_IsConversionOngoing>
 8003600:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ffb3 	bl	8003572 <LL_ADC_REG_IsConversionOngoing>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d14c      	bne.n	80036ac <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003612:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003614:	2b00      	cmp	r3, #0
 8003616:	d149      	bne.n	80036ac <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003618:	4b30      	ldr	r3, [pc, #192]	; (80036dc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800361a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d028      	beq.n	8003676 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003636:	035b      	lsls	r3, r3, #13
 8003638:	430b      	orrs	r3, r1
 800363a:	431a      	orrs	r2, r3
 800363c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800363e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003640:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003644:	f7ff ff82 	bl	800354c <LL_ADC_IsEnabled>
 8003648:	4604      	mov	r4, r0
 800364a:	4823      	ldr	r0, [pc, #140]	; (80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800364c:	f7ff ff7e 	bl	800354c <LL_ADC_IsEnabled>
 8003650:	4603      	mov	r3, r0
 8003652:	4323      	orrs	r3, r4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d133      	bne.n	80036c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003660:	f023 030f 	bic.w	r3, r3, #15
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	6811      	ldr	r1, [r2, #0]
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	6892      	ldr	r2, [r2, #8]
 800366c:	430a      	orrs	r2, r1
 800366e:	431a      	orrs	r2, r3
 8003670:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003672:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003674:	e024      	b.n	80036c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800367e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003680:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003682:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003686:	f7ff ff61 	bl	800354c <LL_ADC_IsEnabled>
 800368a:	4604      	mov	r4, r0
 800368c:	4812      	ldr	r0, [pc, #72]	; (80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800368e:	f7ff ff5d 	bl	800354c <LL_ADC_IsEnabled>
 8003692:	4603      	mov	r3, r0
 8003694:	4323      	orrs	r3, r4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d112      	bne.n	80036c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800369a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036a2:	f023 030f 	bic.w	r3, r3, #15
 80036a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036a8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036aa:	e009      	b.n	80036c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b0:	f043 0220 	orr.w	r2, r3, #32
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80036be:	e000      	b.n	80036c2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80036ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3784      	adds	r7, #132	; 0x84
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd90      	pop	{r4, r7, pc}
 80036d6:	bf00      	nop
 80036d8:	50000100 	.word	0x50000100
 80036dc:	50000300 	.word	0x50000300

080036e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <__NVIC_SetPriorityGrouping+0x44>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036fc:	4013      	ands	r3, r2
 80036fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800370c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003712:	4a04      	ldr	r2, [pc, #16]	; (8003724 <__NVIC_SetPriorityGrouping+0x44>)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	60d3      	str	r3, [r2, #12]
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800372c:	4b04      	ldr	r3, [pc, #16]	; (8003740 <__NVIC_GetPriorityGrouping+0x18>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	0a1b      	lsrs	r3, r3, #8
 8003732:	f003 0307 	and.w	r3, r3, #7
}
 8003736:	4618      	mov	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	2b00      	cmp	r3, #0
 8003754:	db0b      	blt.n	800376e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	f003 021f 	and.w	r2, r3, #31
 800375c:	4907      	ldr	r1, [pc, #28]	; (800377c <__NVIC_EnableIRQ+0x38>)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	2001      	movs	r0, #1
 8003766:	fa00 f202 	lsl.w	r2, r0, r2
 800376a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	e000e100 	.word	0xe000e100

08003780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	6039      	str	r1, [r7, #0]
 800378a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800378c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003790:	2b00      	cmp	r3, #0
 8003792:	db0a      	blt.n	80037aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	b2da      	uxtb	r2, r3
 8003798:	490c      	ldr	r1, [pc, #48]	; (80037cc <__NVIC_SetPriority+0x4c>)
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	0112      	lsls	r2, r2, #4
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	440b      	add	r3, r1
 80037a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037a8:	e00a      	b.n	80037c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	4908      	ldr	r1, [pc, #32]	; (80037d0 <__NVIC_SetPriority+0x50>)
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	3b04      	subs	r3, #4
 80037b8:	0112      	lsls	r2, r2, #4
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	440b      	add	r3, r1
 80037be:	761a      	strb	r2, [r3, #24]
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	e000e100 	.word	0xe000e100
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b089      	sub	sp, #36	; 0x24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f1c3 0307 	rsb	r3, r3, #7
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	bf28      	it	cs
 80037f2:	2304      	movcs	r3, #4
 80037f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3304      	adds	r3, #4
 80037fa:	2b06      	cmp	r3, #6
 80037fc:	d902      	bls.n	8003804 <NVIC_EncodePriority+0x30>
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3b03      	subs	r3, #3
 8003802:	e000      	b.n	8003806 <NVIC_EncodePriority+0x32>
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003808:	f04f 32ff 	mov.w	r2, #4294967295
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43da      	mvns	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	401a      	ands	r2, r3
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800381c:	f04f 31ff 	mov.w	r1, #4294967295
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	fa01 f303 	lsl.w	r3, r1, r3
 8003826:	43d9      	mvns	r1, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800382c:	4313      	orrs	r3, r2
         );
}
 800382e:	4618      	mov	r0, r3
 8003830:	3724      	adds	r7, #36	; 0x24
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
	...

0800383c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3b01      	subs	r3, #1
 8003848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800384c:	d301      	bcc.n	8003852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800384e:	2301      	movs	r3, #1
 8003850:	e00f      	b.n	8003872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003852:	4a0a      	ldr	r2, [pc, #40]	; (800387c <SysTick_Config+0x40>)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3b01      	subs	r3, #1
 8003858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800385a:	210f      	movs	r1, #15
 800385c:	f04f 30ff 	mov.w	r0, #4294967295
 8003860:	f7ff ff8e 	bl	8003780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <SysTick_Config+0x40>)
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800386a:	4b04      	ldr	r3, [pc, #16]	; (800387c <SysTick_Config+0x40>)
 800386c:	2207      	movs	r2, #7
 800386e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	e000e010 	.word	0xe000e010

08003880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff ff29 	bl	80036e0 <__NVIC_SetPriorityGrouping>
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b086      	sub	sp, #24
 800389a:	af00      	add	r7, sp, #0
 800389c:	4603      	mov	r3, r0
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
 80038a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038a4:	f7ff ff40 	bl	8003728 <__NVIC_GetPriorityGrouping>
 80038a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	6978      	ldr	r0, [r7, #20]
 80038b0:	f7ff ff90 	bl	80037d4 <NVIC_EncodePriority>
 80038b4:	4602      	mov	r2, r0
 80038b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ba:	4611      	mov	r1, r2
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff ff5f 	bl	8003780 <__NVIC_SetPriority>
}
 80038c2:	bf00      	nop
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	4603      	mov	r3, r0
 80038d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff ff33 	bl	8003744 <__NVIC_EnableIRQ>
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff ffa4 	bl	800383c <SysTick_Config>
 80038f4:	4603      	mov	r3, r0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e08d      	b.n	8003a2e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	4b47      	ldr	r3, [pc, #284]	; (8003a38 <HAL_DMA_Init+0x138>)
 800391a:	429a      	cmp	r2, r3
 800391c:	d80f      	bhi.n	800393e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	461a      	mov	r2, r3
 8003924:	4b45      	ldr	r3, [pc, #276]	; (8003a3c <HAL_DMA_Init+0x13c>)
 8003926:	4413      	add	r3, r2
 8003928:	4a45      	ldr	r2, [pc, #276]	; (8003a40 <HAL_DMA_Init+0x140>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	091b      	lsrs	r3, r3, #4
 8003930:	009a      	lsls	r2, r3, #2
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a42      	ldr	r2, [pc, #264]	; (8003a44 <HAL_DMA_Init+0x144>)
 800393a:	641a      	str	r2, [r3, #64]	; 0x40
 800393c:	e00e      	b.n	800395c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	4b40      	ldr	r3, [pc, #256]	; (8003a48 <HAL_DMA_Init+0x148>)
 8003946:	4413      	add	r3, r2
 8003948:	4a3d      	ldr	r2, [pc, #244]	; (8003a40 <HAL_DMA_Init+0x140>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	009a      	lsls	r2, r3, #2
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a3c      	ldr	r2, [pc, #240]	; (8003a4c <HAL_DMA_Init+0x14c>)
 800395a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003976:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003980:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800398c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003998:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f8fe 	bl	8003bb0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039bc:	d102      	bne.n	80039c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039d8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d010      	beq.n	8003a04 <HAL_DMA_Init+0x104>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d80c      	bhi.n	8003a04 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f91e 	bl	8003c2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	e008      	b.n	8003a16 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40020407 	.word	0x40020407
 8003a3c:	bffdfff8 	.word	0xbffdfff8
 8003a40:	cccccccd 	.word	0xcccccccd
 8003a44:	40020000 	.word	0x40020000
 8003a48:	bffdfbf8 	.word	0xbffdfbf8
 8003a4c:	40020400 	.word	0x40020400

08003a50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	2204      	movs	r2, #4
 8003a72:	409a      	lsls	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d026      	beq.n	8003aca <HAL_DMA_IRQHandler+0x7a>
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d021      	beq.n	8003aca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d107      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0204 	bic.w	r2, r2, #4
 8003aa2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa8:	f003 021f 	and.w	r2, r3, #31
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	2104      	movs	r1, #4
 8003ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d071      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ac8:	e06c      	b.n	8003ba4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f003 031f 	and.w	r3, r3, #31
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d02e      	beq.n	8003b3c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d029      	beq.n	8003b3c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10b      	bne.n	8003b0e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 020a 	bic.w	r2, r2, #10
 8003b04:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	f003 021f 	and.w	r2, r3, #31
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	2102      	movs	r1, #2
 8003b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b20:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d038      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b3a:	e033      	b.n	8003ba4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b40:	f003 031f 	and.w	r3, r3, #31
 8003b44:	2208      	movs	r2, #8
 8003b46:	409a      	lsls	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d02a      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d025      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 020e 	bic.w	r2, r2, #14
 8003b68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	f003 021f 	and.w	r2, r3, #31
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	2101      	movs	r1, #1
 8003b78:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d004      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop
}
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b16      	ldr	r3, [pc, #88]	; (8003c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d802      	bhi.n	8003bca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003bc4:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	e001      	b.n	8003bce <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003bca:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003bcc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	3b08      	subs	r3, #8
 8003bda:	4a12      	ldr	r2, [pc, #72]	; (8003c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003be0:	091b      	lsrs	r3, r3, #4
 8003be2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be8:	089b      	lsrs	r3, r3, #2
 8003bea:	009a      	lsls	r2, r3, #2
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4413      	add	r3, r2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a0b      	ldr	r2, [pc, #44]	; (8003c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003bfa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 031f 	and.w	r3, r3, #31
 8003c02:	2201      	movs	r2, #1
 8003c04:	409a      	lsls	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40020407 	.word	0x40020407
 8003c1c:	40020800 	.word	0x40020800
 8003c20:	40020820 	.word	0x40020820
 8003c24:	cccccccd 	.word	0xcccccccd
 8003c28:	40020880 	.word	0x40020880

08003c2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	461a      	mov	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a08      	ldr	r2, [pc, #32]	; (8003c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c4e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	f003 031f 	and.w	r3, r3, #31
 8003c58:	2201      	movs	r2, #1
 8003c5a:	409a      	lsls	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003c60:	bf00      	nop
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	1000823f 	.word	0x1000823f
 8003c70:	40020940 	.word	0x40020940

08003c74 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e147      	b.n	8003f16 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fd f8d0 	bl	8000e40 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0210 	bic.w	r2, r2, #16
 8003cae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cb0:	f7fe fa56 	bl	8002160 <HAL_GetTick>
 8003cb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003cb6:	e012      	b.n	8003cde <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003cb8:	f7fe fa52 	bl	8002160 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b0a      	cmp	r3, #10
 8003cc4:	d90b      	bls.n	8003cde <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cca:	f043 0201 	orr.w	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e11b      	b.n	8003f16 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d0e5      	beq.n	8003cb8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cfc:	f7fe fa30 	bl	8002160 <HAL_GetTick>
 8003d00:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003d02:	e012      	b.n	8003d2a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003d04:	f7fe fa2c 	bl	8002160 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b0a      	cmp	r3, #10
 8003d10:	d90b      	bls.n	8003d2a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d16:	f043 0201 	orr.w	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2203      	movs	r2, #3
 8003d22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e0f5      	b.n	8003f16 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0e5      	beq.n	8003d04 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0202 	orr.w	r2, r2, #2
 8003d46:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a74      	ldr	r2, [pc, #464]	; (8003f20 <HAL_FDCAN_Init+0x2ac>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d103      	bne.n	8003d5a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003d52:	4a74      	ldr	r2, [pc, #464]	; (8003f24 <HAL_FDCAN_Init+0x2b0>)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	7c1b      	ldrb	r3, [r3, #16]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d108      	bne.n	8003d74 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699a      	ldr	r2, [r3, #24]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d70:	619a      	str	r2, [r3, #24]
 8003d72:	e007      	b.n	8003d84 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d82:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	7c5b      	ldrb	r3, [r3, #17]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d108      	bne.n	8003d9e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d9a:	619a      	str	r2, [r3, #24]
 8003d9c:	e007      	b.n	8003dae <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699a      	ldr	r2, [r3, #24]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003dac:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	7c9b      	ldrb	r3, [r3, #18]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d108      	bne.n	8003dc8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699a      	ldr	r2, [r3, #24]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dc4:	619a      	str	r2, [r3, #24]
 8003dc6:	e007      	b.n	8003dd8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dd6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699a      	ldr	r2, [r3, #24]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003dfc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0210 	bic.w	r2, r2, #16
 8003e0c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d108      	bne.n	8003e28 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699a      	ldr	r2, [r3, #24]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f042 0204 	orr.w	r2, r2, #4
 8003e24:	619a      	str	r2, [r3, #24]
 8003e26:	e02c      	b.n	8003e82 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d028      	beq.n	8003e82 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d01c      	beq.n	8003e72 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e46:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0210 	orr.w	r2, r2, #16
 8003e56:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d110      	bne.n	8003e82 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0220 	orr.w	r2, r2, #32
 8003e6e:	619a      	str	r2, [r3, #24]
 8003e70:	e007      	b.n	8003e82 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699a      	ldr	r2, [r3, #24]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0220 	orr.w	r2, r2, #32
 8003e80:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003e92:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003e9a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003eaa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003eac:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eb6:	d115      	bne.n	8003ee4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ec6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003ed0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003ee0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ee2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f8c8 	bl	8004090 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40006400 	.word	0x40006400
 8003f24:	40006500 	.word	0x40006500

08003f28 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f38:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d002      	beq.n	8003f46 <HAL_FDCAN_ConfigFilter+0x1e>
 8003f40:	7dfb      	ldrb	r3, [r7, #23]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d13d      	bne.n	8003fc2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d119      	bne.n	8003f82 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003f5a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8003f62:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	e01d      	b.n	8003fbe <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	075a      	lsls	r2, r3, #29
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	079a      	lsls	r2, r3, #30
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e006      	b.n	8003fd0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc6:	f043 0202 	orr.w	r2, r3, #2
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
  }
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d116      	bne.n	8004024 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ffe:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	011a      	lsls	r2, r3, #4
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	431a      	orrs	r2, r3
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	431a      	orrs	r2, r3
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	431a      	orrs	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	e006      	b.n	8004032 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004028:	f043 0204 	orr.w	r2, r3, #4
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
  }
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b01      	cmp	r3, #1
 8004050:	d110      	bne.n	8004074 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2202      	movs	r2, #2
 8004056:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699a      	ldr	r2, [r3, #24]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0201 	bic.w	r2, r2, #1
 8004068:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8004070:	2300      	movs	r3, #0
 8004072:	e006      	b.n	8004082 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004078:	f043 0204 	orr.w	r2, r3, #4
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
  }
}
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
	...

08004090 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004098:	4b27      	ldr	r3, [pc, #156]	; (8004138 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800409a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040aa:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b2:	041a      	lsls	r2, r3, #16
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	061a      	lsls	r2, r3, #24
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	e005      	b.n	800411e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3304      	adds	r3, #4
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	429a      	cmp	r2, r3
 8004128:	d3f3      	bcc.n	8004112 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800412a:	bf00      	nop
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	4000a400 	.word	0x4000a400

0800413c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800414a:	e15a      	b.n	8004402 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	2101      	movs	r1, #1
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	fa01 f303 	lsl.w	r3, r1, r3
 8004158:	4013      	ands	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 814c 	beq.w	80043fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d005      	beq.n	800417c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004178:	2b02      	cmp	r3, #2
 800417a:	d130      	bne.n	80041de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	2203      	movs	r2, #3
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	43db      	mvns	r3, r3
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4013      	ands	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041b2:	2201      	movs	r2, #1
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43db      	mvns	r3, r3
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4013      	ands	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	091b      	lsrs	r3, r3, #4
 80041c8:	f003 0201 	and.w	r2, r3, #1
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d017      	beq.n	800421a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	2203      	movs	r2, #3
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43db      	mvns	r3, r3
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4013      	ands	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d123      	bne.n	800426e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	08da      	lsrs	r2, r3, #3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3208      	adds	r2, #8
 800422e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004232:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	220f      	movs	r2, #15
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	43db      	mvns	r3, r3
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4013      	ands	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	08da      	lsrs	r2, r3, #3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3208      	adds	r2, #8
 8004268:	6939      	ldr	r1, [r7, #16]
 800426a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	2203      	movs	r2, #3
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4013      	ands	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f003 0203 	and.w	r2, r3, #3
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80a6 	beq.w	80043fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042b0:	4b5b      	ldr	r3, [pc, #364]	; (8004420 <HAL_GPIO_Init+0x2e4>)
 80042b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b4:	4a5a      	ldr	r2, [pc, #360]	; (8004420 <HAL_GPIO_Init+0x2e4>)
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	6613      	str	r3, [r2, #96]	; 0x60
 80042bc:	4b58      	ldr	r3, [pc, #352]	; (8004420 <HAL_GPIO_Init+0x2e4>)
 80042be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042c8:	4a56      	ldr	r2, [pc, #344]	; (8004424 <HAL_GPIO_Init+0x2e8>)
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	089b      	lsrs	r3, r3, #2
 80042ce:	3302      	adds	r3, #2
 80042d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	220f      	movs	r2, #15
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4013      	ands	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042f2:	d01f      	beq.n	8004334 <HAL_GPIO_Init+0x1f8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a4c      	ldr	r2, [pc, #304]	; (8004428 <HAL_GPIO_Init+0x2ec>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d019      	beq.n	8004330 <HAL_GPIO_Init+0x1f4>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a4b      	ldr	r2, [pc, #300]	; (800442c <HAL_GPIO_Init+0x2f0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d013      	beq.n	800432c <HAL_GPIO_Init+0x1f0>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a4a      	ldr	r2, [pc, #296]	; (8004430 <HAL_GPIO_Init+0x2f4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00d      	beq.n	8004328 <HAL_GPIO_Init+0x1ec>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a49      	ldr	r2, [pc, #292]	; (8004434 <HAL_GPIO_Init+0x2f8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d007      	beq.n	8004324 <HAL_GPIO_Init+0x1e8>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a48      	ldr	r2, [pc, #288]	; (8004438 <HAL_GPIO_Init+0x2fc>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d101      	bne.n	8004320 <HAL_GPIO_Init+0x1e4>
 800431c:	2305      	movs	r3, #5
 800431e:	e00a      	b.n	8004336 <HAL_GPIO_Init+0x1fa>
 8004320:	2306      	movs	r3, #6
 8004322:	e008      	b.n	8004336 <HAL_GPIO_Init+0x1fa>
 8004324:	2304      	movs	r3, #4
 8004326:	e006      	b.n	8004336 <HAL_GPIO_Init+0x1fa>
 8004328:	2303      	movs	r3, #3
 800432a:	e004      	b.n	8004336 <HAL_GPIO_Init+0x1fa>
 800432c:	2302      	movs	r3, #2
 800432e:	e002      	b.n	8004336 <HAL_GPIO_Init+0x1fa>
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <HAL_GPIO_Init+0x1fa>
 8004334:	2300      	movs	r3, #0
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	f002 0203 	and.w	r2, r2, #3
 800433c:	0092      	lsls	r2, r2, #2
 800433e:	4093      	lsls	r3, r2
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004346:	4937      	ldr	r1, [pc, #220]	; (8004424 <HAL_GPIO_Init+0x2e8>)
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	089b      	lsrs	r3, r3, #2
 800434c:	3302      	adds	r3, #2
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004354:	4b39      	ldr	r3, [pc, #228]	; (800443c <HAL_GPIO_Init+0x300>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	43db      	mvns	r3, r3
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4013      	ands	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004378:	4a30      	ldr	r2, [pc, #192]	; (800443c <HAL_GPIO_Init+0x300>)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800437e:	4b2f      	ldr	r3, [pc, #188]	; (800443c <HAL_GPIO_Init+0x300>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	43db      	mvns	r3, r3
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4013      	ands	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043a2:	4a26      	ldr	r2, [pc, #152]	; (800443c <HAL_GPIO_Init+0x300>)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80043a8:	4b24      	ldr	r3, [pc, #144]	; (800443c <HAL_GPIO_Init+0x300>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	43db      	mvns	r3, r3
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4013      	ands	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043cc:	4a1b      	ldr	r2, [pc, #108]	; (800443c <HAL_GPIO_Init+0x300>)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80043d2:	4b1a      	ldr	r3, [pc, #104]	; (800443c <HAL_GPIO_Init+0x300>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	43db      	mvns	r3, r3
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4013      	ands	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043f6:	4a11      	ldr	r2, [pc, #68]	; (800443c <HAL_GPIO_Init+0x300>)
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	3301      	adds	r3, #1
 8004400:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	fa22 f303 	lsr.w	r3, r2, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	f47f ae9d 	bne.w	800414c <HAL_GPIO_Init+0x10>
  }
}
 8004412:	bf00      	nop
 8004414:	bf00      	nop
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	40021000 	.word	0x40021000
 8004424:	40010000 	.word	0x40010000
 8004428:	48000400 	.word	0x48000400
 800442c:	48000800 	.word	0x48000800
 8004430:	48000c00 	.word	0x48000c00
 8004434:	48001000 	.word	0x48001000
 8004438:	48001400 	.word	0x48001400
 800443c:	40010400 	.word	0x40010400

08004440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	807b      	strh	r3, [r7, #2]
 800444c:	4613      	mov	r3, r2
 800444e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004450:	787b      	ldrb	r3, [r7, #1]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004456:	887a      	ldrh	r2, [r7, #2]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800445c:	e002      	b.n	8004464 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800445e:	887a      	ldrh	r2, [r7, #2]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e0bb      	b.n	80045fe <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b05      	cmp	r3, #5
 8004490:	d101      	bne.n	8004496 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e0b3      	b.n	80045fe <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d101      	bne.n	80044a6 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e0ab      	b.n	80045fe <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044a6:	4b58      	ldr	r3, [pc, #352]	; (8004608 <HAL_OPAMP_Init+0x198>)
 80044a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044aa:	4a57      	ldr	r2, [pc, #348]	; (8004608 <HAL_OPAMP_Init+0x198>)
 80044ac:	f043 0301 	orr.w	r3, r3, #1
 80044b0:	6613      	str	r3, [r2, #96]	; 0x60
 80044b2:	4b55      	ldr	r3, [pc, #340]	; (8004608 <HAL_OPAMP_Init+0x198>)
 80044b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	60bb      	str	r3, [r7, #8]
 80044bc:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d103      	bne.n	80044d2 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fd fa24 	bl	8001920 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b40      	cmp	r3, #64	; 0x40
 80044de:	d003      	beq.n	80044e8 <HAL_OPAMP_Init+0x78>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	2b60      	cmp	r3, #96	; 0x60
 80044e6:	d133      	bne.n	8004550 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 0110 	bic.w	r1, r3, #16
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	4b41      	ldr	r3, [pc, #260]	; (800460c <HAL_OPAMP_Init+0x19c>)
 8004506:	4013      	ands	r3, r2
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6851      	ldr	r1, [r2, #4]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6892      	ldr	r2, [r2, #8]
 8004510:	4311      	orrs	r1, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6912      	ldr	r2, [r2, #16]
 8004516:	430a      	orrs	r2, r1
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	7d09      	ldrb	r1, [r1, #20]
 800451c:	2901      	cmp	r1, #1
 800451e:	d102      	bne.n	8004526 <HAL_OPAMP_Init+0xb6>
 8004520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004524:	e000      	b.n	8004528 <HAL_OPAMP_Init+0xb8>
 8004526:	2100      	movs	r1, #0
 8004528:	4311      	orrs	r1, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800452e:	4311      	orrs	r1, r2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004534:	4311      	orrs	r1, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800453a:	04d2      	lsls	r2, r2, #19
 800453c:	4311      	orrs	r1, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004542:	0612      	lsls	r2, r2, #24
 8004544:	4311      	orrs	r1, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	430b      	orrs	r3, r1
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e035      	b.n	80045bc <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f023 0110 	bic.w	r1, r3, #16
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4b27      	ldr	r3, [pc, #156]	; (800460c <HAL_OPAMP_Init+0x19c>)
 800456e:	4013      	ands	r3, r2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6851      	ldr	r1, [r2, #4]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6892      	ldr	r2, [r2, #8]
 8004578:	4311      	orrs	r1, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	68d2      	ldr	r2, [r2, #12]
 800457e:	4311      	orrs	r1, r2
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6912      	ldr	r2, [r2, #16]
 8004584:	430a      	orrs	r2, r1
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	7d09      	ldrb	r1, [r1, #20]
 800458a:	2901      	cmp	r1, #1
 800458c:	d102      	bne.n	8004594 <HAL_OPAMP_Init+0x124>
 800458e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004592:	e000      	b.n	8004596 <HAL_OPAMP_Init+0x126>
 8004594:	2100      	movs	r1, #0
 8004596:	4311      	orrs	r1, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800459c:	4311      	orrs	r1, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80045a2:	4311      	orrs	r1, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045a8:	04d2      	lsls	r2, r2, #19
 80045aa:	4311      	orrs	r1, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045b0:	0612      	lsls	r2, r2, #24
 80045b2:	4311      	orrs	r1, r2
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6812      	ldr	r2, [r2, #0]
 80045b8:	430b      	orrs	r3, r1
 80045ba:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	db10      	blt.n	80045e8 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699a      	ldr	r2, [r3, #24]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d103      	bne.n	80045fc <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40021000 	.word	0x40021000
 800460c:	e0003e11 	.word	0xe0003e11

08004610 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d141      	bne.n	80046a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800461e:	4b4b      	ldr	r3, [pc, #300]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800462a:	d131      	bne.n	8004690 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800462c:	4b47      	ldr	r3, [pc, #284]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004632:	4a46      	ldr	r2, [pc, #280]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004638:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800463c:	4b43      	ldr	r3, [pc, #268]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004644:	4a41      	ldr	r2, [pc, #260]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004646:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800464a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800464c:	4b40      	ldr	r3, [pc, #256]	; (8004750 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2232      	movs	r2, #50	; 0x32
 8004652:	fb02 f303 	mul.w	r3, r2, r3
 8004656:	4a3f      	ldr	r2, [pc, #252]	; (8004754 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004658:	fba2 2303 	umull	r2, r3, r2, r3
 800465c:	0c9b      	lsrs	r3, r3, #18
 800465e:	3301      	adds	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004662:	e002      	b.n	800466a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3b01      	subs	r3, #1
 8004668:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800466a:	4b38      	ldr	r3, [pc, #224]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004676:	d102      	bne.n	800467e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f2      	bne.n	8004664 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800467e:	4b33      	ldr	r3, [pc, #204]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800468a:	d158      	bne.n	800473e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e057      	b.n	8004740 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004690:	4b2e      	ldr	r3, [pc, #184]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004696:	4a2d      	ldr	r2, [pc, #180]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800469c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046a0:	e04d      	b.n	800473e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a8:	d141      	bne.n	800472e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046aa:	4b28      	ldr	r3, [pc, #160]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b6:	d131      	bne.n	800471c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046b8:	4b24      	ldr	r3, [pc, #144]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046be:	4a23      	ldr	r2, [pc, #140]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046c8:	4b20      	ldr	r3, [pc, #128]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046d0:	4a1e      	ldr	r2, [pc, #120]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046d8:	4b1d      	ldr	r3, [pc, #116]	; (8004750 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2232      	movs	r2, #50	; 0x32
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	4a1c      	ldr	r2, [pc, #112]	; (8004754 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046e4:	fba2 2303 	umull	r2, r3, r2, r3
 80046e8:	0c9b      	lsrs	r3, r3, #18
 80046ea:	3301      	adds	r3, #1
 80046ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ee:	e002      	b.n	80046f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046f6:	4b15      	ldr	r3, [pc, #84]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004702:	d102      	bne.n	800470a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f2      	bne.n	80046f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800470a:	4b10      	ldr	r3, [pc, #64]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004716:	d112      	bne.n	800473e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e011      	b.n	8004740 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004722:	4a0a      	ldr	r2, [pc, #40]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004728:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800472c:	e007      	b.n	800473e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800472e:	4b07      	ldr	r3, [pc, #28]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004736:	4a05      	ldr	r2, [pc, #20]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004738:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800473c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	40007000 	.word	0x40007000
 8004750:	20000000 	.word	0x20000000
 8004754:	431bde83 	.word	0x431bde83

08004758 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e2fe      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d075      	beq.n	8004862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004776:	4b97      	ldr	r3, [pc, #604]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 030c 	and.w	r3, r3, #12
 800477e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004780:	4b94      	ldr	r3, [pc, #592]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b0c      	cmp	r3, #12
 800478e:	d102      	bne.n	8004796 <HAL_RCC_OscConfig+0x3e>
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2b03      	cmp	r3, #3
 8004794:	d002      	beq.n	800479c <HAL_RCC_OscConfig+0x44>
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b08      	cmp	r3, #8
 800479a:	d10b      	bne.n	80047b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479c:	4b8d      	ldr	r3, [pc, #564]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d05b      	beq.n	8004860 <HAL_RCC_OscConfig+0x108>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d157      	bne.n	8004860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e2d9      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047bc:	d106      	bne.n	80047cc <HAL_RCC_OscConfig+0x74>
 80047be:	4b85      	ldr	r3, [pc, #532]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a84      	ldr	r2, [pc, #528]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 80047c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	e01d      	b.n	8004808 <HAL_RCC_OscConfig+0xb0>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCC_OscConfig+0x98>
 80047d6:	4b7f      	ldr	r3, [pc, #508]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a7e      	ldr	r2, [pc, #504]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 80047dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	4b7c      	ldr	r3, [pc, #496]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a7b      	ldr	r2, [pc, #492]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	e00b      	b.n	8004808 <HAL_RCC_OscConfig+0xb0>
 80047f0:	4b78      	ldr	r3, [pc, #480]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a77      	ldr	r2, [pc, #476]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 80047f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	4b75      	ldr	r3, [pc, #468]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a74      	ldr	r2, [pc, #464]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 8004802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d013      	beq.n	8004838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004810:	f7fd fca6 	bl	8002160 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004818:	f7fd fca2 	bl	8002160 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b64      	cmp	r3, #100	; 0x64
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e29e      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800482a:	4b6a      	ldr	r3, [pc, #424]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0xc0>
 8004836:	e014      	b.n	8004862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7fd fc92 	bl	8002160 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004840:	f7fd fc8e 	bl	8002160 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e28a      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004852:	4b60      	ldr	r3, [pc, #384]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0xe8>
 800485e:	e000      	b.n	8004862 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d075      	beq.n	800495a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800486e:	4b59      	ldr	r3, [pc, #356]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 030c 	and.w	r3, r3, #12
 8004876:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004878:	4b56      	ldr	r3, [pc, #344]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b0c      	cmp	r3, #12
 8004886:	d102      	bne.n	800488e <HAL_RCC_OscConfig+0x136>
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d002      	beq.n	8004894 <HAL_RCC_OscConfig+0x13c>
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	2b04      	cmp	r3, #4
 8004892:	d11f      	bne.n	80048d4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004894:	4b4f      	ldr	r3, [pc, #316]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_RCC_OscConfig+0x154>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e25d      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ac:	4b49      	ldr	r3, [pc, #292]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	061b      	lsls	r3, r3, #24
 80048ba:	4946      	ldr	r1, [pc, #280]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80048c0:	4b45      	ldr	r3, [pc, #276]	; (80049d8 <HAL_RCC_OscConfig+0x280>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fd fbff 	bl	80020c8 <HAL_InitTick>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d043      	beq.n	8004958 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e249      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d023      	beq.n	8004924 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048dc:	4b3d      	ldr	r3, [pc, #244]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a3c      	ldr	r2, [pc, #240]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 80048e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e8:	f7fd fc3a 	bl	8002160 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048f0:	f7fd fc36 	bl	8002160 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e232      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004902:	4b34      	ldr	r3, [pc, #208]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490e:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	061b      	lsls	r3, r3, #24
 800491c:	492d      	ldr	r1, [pc, #180]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 800491e:	4313      	orrs	r3, r2
 8004920:	604b      	str	r3, [r1, #4]
 8004922:	e01a      	b.n	800495a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004924:	4b2b      	ldr	r3, [pc, #172]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a2a      	ldr	r2, [pc, #168]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 800492a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800492e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004930:	f7fd fc16 	bl	8002160 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004938:	f7fd fc12 	bl	8002160 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e20e      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800494a:	4b22      	ldr	r3, [pc, #136]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f0      	bne.n	8004938 <HAL_RCC_OscConfig+0x1e0>
 8004956:	e000      	b.n	800495a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004958:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d041      	beq.n	80049ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d01c      	beq.n	80049a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800496e:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 8004970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004974:	4a17      	ldr	r2, [pc, #92]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497e:	f7fd fbef 	bl	8002160 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004986:	f7fd fbeb 	bl	8002160 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e1e7      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 800499a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0ef      	beq.n	8004986 <HAL_RCC_OscConfig+0x22e>
 80049a6:	e020      	b.n	80049ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a8:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 80049aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ae:	4a09      	ldr	r2, [pc, #36]	; (80049d4 <HAL_RCC_OscConfig+0x27c>)
 80049b0:	f023 0301 	bic.w	r3, r3, #1
 80049b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b8:	f7fd fbd2 	bl	8002160 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049be:	e00d      	b.n	80049dc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c0:	f7fd fbce 	bl	8002160 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d906      	bls.n	80049dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e1ca      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>
 80049d2:	bf00      	nop
 80049d4:	40021000 	.word	0x40021000
 80049d8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049dc:	4b8c      	ldr	r3, [pc, #560]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 80049de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1ea      	bne.n	80049c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 80a6 	beq.w	8004b44 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049f8:	2300      	movs	r3, #0
 80049fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049fc:	4b84      	ldr	r3, [pc, #528]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 80049fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <HAL_RCC_OscConfig+0x2b4>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <HAL_RCC_OscConfig+0x2b6>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00d      	beq.n	8004a2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a12:	4b7f      	ldr	r3, [pc, #508]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a16:	4a7e      	ldr	r2, [pc, #504]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8004a1e:	4b7c      	ldr	r3, [pc, #496]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a2e:	4b79      	ldr	r3, [pc, #484]	; (8004c14 <HAL_RCC_OscConfig+0x4bc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d118      	bne.n	8004a6c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a3a:	4b76      	ldr	r3, [pc, #472]	; (8004c14 <HAL_RCC_OscConfig+0x4bc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a75      	ldr	r2, [pc, #468]	; (8004c14 <HAL_RCC_OscConfig+0x4bc>)
 8004a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a46:	f7fd fb8b 	bl	8002160 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a4c:	e008      	b.n	8004a60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4e:	f7fd fb87 	bl	8002160 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e183      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a60:	4b6c      	ldr	r3, [pc, #432]	; (8004c14 <HAL_RCC_OscConfig+0x4bc>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0f0      	beq.n	8004a4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d108      	bne.n	8004a86 <HAL_RCC_OscConfig+0x32e>
 8004a74:	4b66      	ldr	r3, [pc, #408]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7a:	4a65      	ldr	r2, [pc, #404]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004a7c:	f043 0301 	orr.w	r3, r3, #1
 8004a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a84:	e024      	b.n	8004ad0 <HAL_RCC_OscConfig+0x378>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b05      	cmp	r3, #5
 8004a8c:	d110      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x358>
 8004a8e:	4b60      	ldr	r3, [pc, #384]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a94:	4a5e      	ldr	r2, [pc, #376]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004a96:	f043 0304 	orr.w	r3, r3, #4
 8004a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a9e:	4b5c      	ldr	r3, [pc, #368]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa4:	4a5a      	ldr	r2, [pc, #360]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aae:	e00f      	b.n	8004ad0 <HAL_RCC_OscConfig+0x378>
 8004ab0:	4b57      	ldr	r3, [pc, #348]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab6:	4a56      	ldr	r2, [pc, #344]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ac0:	4b53      	ldr	r3, [pc, #332]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac6:	4a52      	ldr	r2, [pc, #328]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004ac8:	f023 0304 	bic.w	r3, r3, #4
 8004acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d016      	beq.n	8004b06 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad8:	f7fd fb42 	bl	8002160 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ade:	e00a      	b.n	8004af6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae0:	f7fd fb3e 	bl	8002160 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e138      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004af6:	4b46      	ldr	r3, [pc, #280]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0ed      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x388>
 8004b04:	e015      	b.n	8004b32 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b06:	f7fd fb2b 	bl	8002160 <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b0c:	e00a      	b.n	8004b24 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b0e:	f7fd fb27 	bl	8002160 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e121      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b24:	4b3a      	ldr	r3, [pc, #232]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1ed      	bne.n	8004b0e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b32:	7ffb      	ldrb	r3, [r7, #31]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d105      	bne.n	8004b44 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b38:	4b35      	ldr	r3, [pc, #212]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3c:	4a34      	ldr	r2, [pc, #208]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0320 	and.w	r3, r3, #32
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d03c      	beq.n	8004bca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01c      	beq.n	8004b92 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b58:	4b2d      	ldr	r3, [pc, #180]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b5e:	4a2c      	ldr	r2, [pc, #176]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004b60:	f043 0301 	orr.w	r3, r3, #1
 8004b64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b68:	f7fd fafa 	bl	8002160 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b70:	f7fd faf6 	bl	8002160 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e0f2      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b82:	4b23      	ldr	r3, [pc, #140]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0ef      	beq.n	8004b70 <HAL_RCC_OscConfig+0x418>
 8004b90:	e01b      	b.n	8004bca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b92:	4b1f      	ldr	r3, [pc, #124]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004b94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b98:	4a1d      	ldr	r2, [pc, #116]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004b9a:	f023 0301 	bic.w	r3, r3, #1
 8004b9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba2:	f7fd fadd 	bl	8002160 <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004baa:	f7fd fad9 	bl	8002160 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e0d5      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bbc:	4b14      	ldr	r3, [pc, #80]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1ef      	bne.n	8004baa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 80c9 	beq.w	8004d66 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bd4:	4b0e      	ldr	r3, [pc, #56]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 030c 	and.w	r3, r3, #12
 8004bdc:	2b0c      	cmp	r3, #12
 8004bde:	f000 8083 	beq.w	8004ce8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d15e      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bea:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a08      	ldr	r2, [pc, #32]	; (8004c10 <HAL_RCC_OscConfig+0x4b8>)
 8004bf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf6:	f7fd fab3 	bl	8002160 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bfc:	e00c      	b.n	8004c18 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfe:	f7fd faaf 	bl	8002160 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d905      	bls.n	8004c18 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e0ab      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>
 8004c10:	40021000 	.word	0x40021000
 8004c14:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c18:	4b55      	ldr	r3, [pc, #340]	; (8004d70 <HAL_RCC_OscConfig+0x618>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1ec      	bne.n	8004bfe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c24:	4b52      	ldr	r3, [pc, #328]	; (8004d70 <HAL_RCC_OscConfig+0x618>)
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	4b52      	ldr	r3, [pc, #328]	; (8004d74 <HAL_RCC_OscConfig+0x61c>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6a11      	ldr	r1, [r2, #32]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c34:	3a01      	subs	r2, #1
 8004c36:	0112      	lsls	r2, r2, #4
 8004c38:	4311      	orrs	r1, r2
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004c3e:	0212      	lsls	r2, r2, #8
 8004c40:	4311      	orrs	r1, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c46:	0852      	lsrs	r2, r2, #1
 8004c48:	3a01      	subs	r2, #1
 8004c4a:	0552      	lsls	r2, r2, #21
 8004c4c:	4311      	orrs	r1, r2
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c52:	0852      	lsrs	r2, r2, #1
 8004c54:	3a01      	subs	r2, #1
 8004c56:	0652      	lsls	r2, r2, #25
 8004c58:	4311      	orrs	r1, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c5e:	06d2      	lsls	r2, r2, #27
 8004c60:	430a      	orrs	r2, r1
 8004c62:	4943      	ldr	r1, [pc, #268]	; (8004d70 <HAL_RCC_OscConfig+0x618>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c68:	4b41      	ldr	r3, [pc, #260]	; (8004d70 <HAL_RCC_OscConfig+0x618>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a40      	ldr	r2, [pc, #256]	; (8004d70 <HAL_RCC_OscConfig+0x618>)
 8004c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c72:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c74:	4b3e      	ldr	r3, [pc, #248]	; (8004d70 <HAL_RCC_OscConfig+0x618>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4a3d      	ldr	r2, [pc, #244]	; (8004d70 <HAL_RCC_OscConfig+0x618>)
 8004c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fd fa6e 	bl	8002160 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c88:	f7fd fa6a 	bl	8002160 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e066      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c9a:	4b35      	ldr	r3, [pc, #212]	; (8004d70 <HAL_RCC_OscConfig+0x618>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCC_OscConfig+0x530>
 8004ca6:	e05e      	b.n	8004d66 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca8:	4b31      	ldr	r3, [pc, #196]	; (8004d70 <HAL_RCC_OscConfig+0x618>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a30      	ldr	r2, [pc, #192]	; (8004d70 <HAL_RCC_OscConfig+0x618>)
 8004cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb4:	f7fd fa54 	bl	8002160 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cbc:	f7fd fa50 	bl	8002160 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e04c      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cce:	4b28      	ldr	r3, [pc, #160]	; (8004d70 <HAL_RCC_OscConfig+0x618>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f0      	bne.n	8004cbc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004cda:	4b25      	ldr	r3, [pc, #148]	; (8004d70 <HAL_RCC_OscConfig+0x618>)
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	4924      	ldr	r1, [pc, #144]	; (8004d70 <HAL_RCC_OscConfig+0x618>)
 8004ce0:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <HAL_RCC_OscConfig+0x620>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	60cb      	str	r3, [r1, #12]
 8004ce6:	e03e      	b.n	8004d66 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e039      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004cf4:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <HAL_RCC_OscConfig+0x618>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f003 0203 	and.w	r2, r3, #3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d12c      	bne.n	8004d62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	3b01      	subs	r3, #1
 8004d14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d123      	bne.n	8004d62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d11b      	bne.n	8004d62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d113      	bne.n	8004d62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	085b      	lsrs	r3, r3, #1
 8004d46:	3b01      	subs	r3, #1
 8004d48:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d109      	bne.n	8004d62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d58:	085b      	lsrs	r3, r3, #1
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d001      	beq.n	8004d66 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e000      	b.n	8004d68 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3720      	adds	r7, #32
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40021000 	.word	0x40021000
 8004d74:	019f800c 	.word	0x019f800c
 8004d78:	feeefffc 	.word	0xfeeefffc

08004d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e11e      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d94:	4b91      	ldr	r3, [pc, #580]	; (8004fdc <HAL_RCC_ClockConfig+0x260>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 030f 	and.w	r3, r3, #15
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d910      	bls.n	8004dc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da2:	4b8e      	ldr	r3, [pc, #568]	; (8004fdc <HAL_RCC_ClockConfig+0x260>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f023 020f 	bic.w	r2, r3, #15
 8004daa:	498c      	ldr	r1, [pc, #560]	; (8004fdc <HAL_RCC_ClockConfig+0x260>)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db2:	4b8a      	ldr	r3, [pc, #552]	; (8004fdc <HAL_RCC_ClockConfig+0x260>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d001      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e106      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d073      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	d129      	bne.n	8004e2c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dd8:	4b81      	ldr	r3, [pc, #516]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0f4      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004de8:	f000 f966 	bl	80050b8 <RCC_GetSysClockFreqFromPLLSource>
 8004dec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	4a7c      	ldr	r2, [pc, #496]	; (8004fe4 <HAL_RCC_ClockConfig+0x268>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d93f      	bls.n	8004e76 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004df6:	4b7a      	ldr	r3, [pc, #488]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d009      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d033      	beq.n	8004e76 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d12f      	bne.n	8004e76 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e16:	4b72      	ldr	r3, [pc, #456]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e1e:	4a70      	ldr	r2, [pc, #448]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e26:	2380      	movs	r3, #128	; 0x80
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	e024      	b.n	8004e76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d107      	bne.n	8004e44 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e34:	4b6a      	ldr	r3, [pc, #424]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d109      	bne.n	8004e54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0c6      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e44:	4b66      	ldr	r3, [pc, #408]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e0be      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004e54:	f000 f8ce 	bl	8004ff4 <HAL_RCC_GetSysClockFreq>
 8004e58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	4a61      	ldr	r2, [pc, #388]	; (8004fe4 <HAL_RCC_ClockConfig+0x268>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d909      	bls.n	8004e76 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e62:	4b5f      	ldr	r3, [pc, #380]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e6a:	4a5d      	ldr	r2, [pc, #372]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004e72:	2380      	movs	r3, #128	; 0x80
 8004e74:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e76:	4b5a      	ldr	r3, [pc, #360]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f023 0203 	bic.w	r2, r3, #3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	4957      	ldr	r1, [pc, #348]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e88:	f7fd f96a 	bl	8002160 <HAL_GetTick>
 8004e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8e:	e00a      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e90:	f7fd f966 	bl	8002160 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e095      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea6:	4b4e      	ldr	r3, [pc, #312]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 020c 	and.w	r2, r3, #12
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d1eb      	bne.n	8004e90 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d023      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ed0:	4b43      	ldr	r3, [pc, #268]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	4a42      	ldr	r2, [pc, #264]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004ed6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004eda:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d007      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004ee8:	4b3d      	ldr	r3, [pc, #244]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ef0:	4a3b      	ldr	r2, [pc, #236]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004ef2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ef6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ef8:	4b39      	ldr	r3, [pc, #228]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	4936      	ldr	r1, [pc, #216]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	608b      	str	r3, [r1, #8]
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2b80      	cmp	r3, #128	; 0x80
 8004f10:	d105      	bne.n	8004f1e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f12:	4b33      	ldr	r3, [pc, #204]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	4a32      	ldr	r2, [pc, #200]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004f18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f1c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f1e:	4b2f      	ldr	r3, [pc, #188]	; (8004fdc <HAL_RCC_ClockConfig+0x260>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d21d      	bcs.n	8004f68 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2c:	4b2b      	ldr	r3, [pc, #172]	; (8004fdc <HAL_RCC_ClockConfig+0x260>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f023 020f 	bic.w	r2, r3, #15
 8004f34:	4929      	ldr	r1, [pc, #164]	; (8004fdc <HAL_RCC_ClockConfig+0x260>)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f3c:	f7fd f910 	bl	8002160 <HAL_GetTick>
 8004f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f42:	e00a      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f44:	f7fd f90c 	bl	8002160 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e03b      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5a:	4b20      	ldr	r3, [pc, #128]	; (8004fdc <HAL_RCC_ClockConfig+0x260>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d1ed      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d008      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f74:	4b1a      	ldr	r3, [pc, #104]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	4917      	ldr	r1, [pc, #92]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d009      	beq.n	8004fa6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f92:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	490f      	ldr	r1, [pc, #60]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fa6:	f000 f825 	bl	8004ff4 <HAL_RCC_GetSysClockFreq>
 8004faa:	4602      	mov	r2, r0
 8004fac:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <HAL_RCC_ClockConfig+0x264>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	091b      	lsrs	r3, r3, #4
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	490c      	ldr	r1, [pc, #48]	; (8004fe8 <HAL_RCC_ClockConfig+0x26c>)
 8004fb8:	5ccb      	ldrb	r3, [r1, r3]
 8004fba:	f003 031f 	and.w	r3, r3, #31
 8004fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc2:	4a0a      	ldr	r2, [pc, #40]	; (8004fec <HAL_RCC_ClockConfig+0x270>)
 8004fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004fc6:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <HAL_RCC_ClockConfig+0x274>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fd f87c 	bl	80020c8 <HAL_InitTick>
 8004fd0:	4603      	mov	r3, r0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40022000 	.word	0x40022000
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	04c4b400 	.word	0x04c4b400
 8004fe8:	08008394 	.word	0x08008394
 8004fec:	20000000 	.word	0x20000000
 8004ff0:	20000004 	.word	0x20000004

08004ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004ffa:	4b2c      	ldr	r3, [pc, #176]	; (80050ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 030c 	and.w	r3, r3, #12
 8005002:	2b04      	cmp	r3, #4
 8005004:	d102      	bne.n	800500c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005006:	4b2a      	ldr	r3, [pc, #168]	; (80050b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	e047      	b.n	800509c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800500c:	4b27      	ldr	r3, [pc, #156]	; (80050ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f003 030c 	and.w	r3, r3, #12
 8005014:	2b08      	cmp	r3, #8
 8005016:	d102      	bne.n	800501e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005018:	4b26      	ldr	r3, [pc, #152]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800501a:	613b      	str	r3, [r7, #16]
 800501c:	e03e      	b.n	800509c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800501e:	4b23      	ldr	r3, [pc, #140]	; (80050ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 030c 	and.w	r3, r3, #12
 8005026:	2b0c      	cmp	r3, #12
 8005028:	d136      	bne.n	8005098 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800502a:	4b20      	ldr	r3, [pc, #128]	; (80050ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005034:	4b1d      	ldr	r3, [pc, #116]	; (80050ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	091b      	lsrs	r3, r3, #4
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	3301      	adds	r3, #1
 8005040:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b03      	cmp	r3, #3
 8005046:	d10c      	bne.n	8005062 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005048:	4a1a      	ldr	r2, [pc, #104]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005050:	4a16      	ldr	r2, [pc, #88]	; (80050ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005052:	68d2      	ldr	r2, [r2, #12]
 8005054:	0a12      	lsrs	r2, r2, #8
 8005056:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800505a:	fb02 f303 	mul.w	r3, r2, r3
 800505e:	617b      	str	r3, [r7, #20]
      break;
 8005060:	e00c      	b.n	800507c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005062:	4a13      	ldr	r2, [pc, #76]	; (80050b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	fbb2 f3f3 	udiv	r3, r2, r3
 800506a:	4a10      	ldr	r2, [pc, #64]	; (80050ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800506c:	68d2      	ldr	r2, [r2, #12]
 800506e:	0a12      	lsrs	r2, r2, #8
 8005070:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005074:	fb02 f303 	mul.w	r3, r2, r3
 8005078:	617b      	str	r3, [r7, #20]
      break;
 800507a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800507c:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	0e5b      	lsrs	r3, r3, #25
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	3301      	adds	r3, #1
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	fbb2 f3f3 	udiv	r3, r2, r3
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	e001      	b.n	800509c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800509c:	693b      	ldr	r3, [r7, #16]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40021000 	.word	0x40021000
 80050b0:	00f42400 	.word	0x00f42400
 80050b4:	007a1200 	.word	0x007a1200

080050b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050be:	4b1e      	ldr	r3, [pc, #120]	; (8005138 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050c8:	4b1b      	ldr	r3, [pc, #108]	; (8005138 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	3301      	adds	r3, #1
 80050d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d10c      	bne.n	80050f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050dc:	4a17      	ldr	r2, [pc, #92]	; (800513c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e4:	4a14      	ldr	r2, [pc, #80]	; (8005138 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050e6:	68d2      	ldr	r2, [r2, #12]
 80050e8:	0a12      	lsrs	r2, r2, #8
 80050ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050ee:	fb02 f303 	mul.w	r3, r2, r3
 80050f2:	617b      	str	r3, [r7, #20]
    break;
 80050f4:	e00c      	b.n	8005110 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050f6:	4a12      	ldr	r2, [pc, #72]	; (8005140 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fe:	4a0e      	ldr	r2, [pc, #56]	; (8005138 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005100:	68d2      	ldr	r2, [r2, #12]
 8005102:	0a12      	lsrs	r2, r2, #8
 8005104:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005108:	fb02 f303 	mul.w	r3, r2, r3
 800510c:	617b      	str	r3, [r7, #20]
    break;
 800510e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005110:	4b09      	ldr	r3, [pc, #36]	; (8005138 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	0e5b      	lsrs	r3, r3, #25
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	3301      	adds	r3, #1
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	fbb2 f3f3 	udiv	r3, r2, r3
 8005128:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800512a:	687b      	ldr	r3, [r7, #4]
}
 800512c:	4618      	mov	r0, r3
 800512e:	371c      	adds	r7, #28
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	40021000 	.word	0x40021000
 800513c:	007a1200 	.word	0x007a1200
 8005140:	00f42400 	.word	0x00f42400

08005144 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800514c:	2300      	movs	r3, #0
 800514e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005150:	2300      	movs	r3, #0
 8005152:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 8098 	beq.w	8005292 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005162:	2300      	movs	r3, #0
 8005164:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005166:	4b43      	ldr	r3, [pc, #268]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10d      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005172:	4b40      	ldr	r3, [pc, #256]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005176:	4a3f      	ldr	r2, [pc, #252]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800517c:	6593      	str	r3, [r2, #88]	; 0x58
 800517e:	4b3d      	ldr	r3, [pc, #244]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005186:	60bb      	str	r3, [r7, #8]
 8005188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800518a:	2301      	movs	r3, #1
 800518c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800518e:	4b3a      	ldr	r3, [pc, #232]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a39      	ldr	r2, [pc, #228]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005198:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800519a:	f7fc ffe1 	bl	8002160 <HAL_GetTick>
 800519e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051a0:	e009      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051a2:	f7fc ffdd 	bl	8002160 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d902      	bls.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	74fb      	strb	r3, [r7, #19]
        break;
 80051b4:	e005      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051b6:	4b30      	ldr	r3, [pc, #192]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0ef      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80051c2:	7cfb      	ldrb	r3, [r7, #19]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d159      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051c8:	4b2a      	ldr	r3, [pc, #168]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d01e      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d019      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051e4:	4b23      	ldr	r3, [pc, #140]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051f0:	4b20      	ldr	r3, [pc, #128]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f6:	4a1f      	ldr	r2, [pc, #124]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005200:	4b1c      	ldr	r3, [pc, #112]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005206:	4a1b      	ldr	r2, [pc, #108]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800520c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005210:	4a18      	ldr	r2, [pc, #96]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d016      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005222:	f7fc ff9d 	bl	8002160 <HAL_GetTick>
 8005226:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005228:	e00b      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800522a:	f7fc ff99 	bl	8002160 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	f241 3288 	movw	r2, #5000	; 0x1388
 8005238:	4293      	cmp	r3, r2
 800523a:	d902      	bls.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	74fb      	strb	r3, [r7, #19]
            break;
 8005240:	e006      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005242:	4b0c      	ldr	r3, [pc, #48]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0ec      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005250:	7cfb      	ldrb	r3, [r7, #19]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10b      	bne.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005256:	4b07      	ldr	r3, [pc, #28]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	4903      	ldr	r1, [pc, #12]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800526c:	e008      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800526e:	7cfb      	ldrb	r3, [r7, #19]
 8005270:	74bb      	strb	r3, [r7, #18]
 8005272:	e005      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005274:	40021000 	.word	0x40021000
 8005278:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527c:	7cfb      	ldrb	r3, [r7, #19]
 800527e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005280:	7c7b      	ldrb	r3, [r7, #17]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d105      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005286:	4ba6      	ldr	r3, [pc, #664]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528a:	4aa5      	ldr	r2, [pc, #660]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800528c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005290:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800529e:	4ba0      	ldr	r3, [pc, #640]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a4:	f023 0203 	bic.w	r2, r3, #3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	499c      	ldr	r1, [pc, #624]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052c0:	4b97      	ldr	r3, [pc, #604]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c6:	f023 020c 	bic.w	r2, r3, #12
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	4994      	ldr	r1, [pc, #592]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052e2:	4b8f      	ldr	r3, [pc, #572]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	498b      	ldr	r1, [pc, #556]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005304:	4b86      	ldr	r3, [pc, #536]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	4983      	ldr	r1, [pc, #524]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005326:	4b7e      	ldr	r3, [pc, #504]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	497a      	ldr	r1, [pc, #488]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005348:	4b75      	ldr	r3, [pc, #468]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	4972      	ldr	r1, [pc, #456]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005358:	4313      	orrs	r3, r2
 800535a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800536a:	4b6d      	ldr	r3, [pc, #436]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800536c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005370:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	4969      	ldr	r1, [pc, #420]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800538c:	4b64      	ldr	r3, [pc, #400]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005392:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	4961      	ldr	r1, [pc, #388]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053ae:	4b5c      	ldr	r3, [pc, #368]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	4958      	ldr	r1, [pc, #352]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d015      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053d0:	4b53      	ldr	r3, [pc, #332]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053de:	4950      	ldr	r1, [pc, #320]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ee:	d105      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053f0:	4b4b      	ldr	r3, [pc, #300]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	4a4a      	ldr	r2, [pc, #296]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005404:	2b00      	cmp	r3, #0
 8005406:	d015      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005408:	4b45      	ldr	r3, [pc, #276]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	4942      	ldr	r1, [pc, #264]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005426:	d105      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005428:	4b3d      	ldr	r3, [pc, #244]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	4a3c      	ldr	r2, [pc, #240]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800542e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005432:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d015      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005440:	4b37      	ldr	r3, [pc, #220]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005446:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	4934      	ldr	r1, [pc, #208]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800545e:	d105      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005460:	4b2f      	ldr	r3, [pc, #188]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	4a2e      	ldr	r2, [pc, #184]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800546a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d015      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005478:	4b29      	ldr	r3, [pc, #164]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005486:	4926      	ldr	r1, [pc, #152]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005496:	d105      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005498:	4b21      	ldr	r3, [pc, #132]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	4a20      	ldr	r2, [pc, #128]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800549e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d015      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054b0:	4b1b      	ldr	r3, [pc, #108]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054be:	4918      	ldr	r1, [pc, #96]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054ce:	d105      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054d0:	4b13      	ldr	r3, [pc, #76]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4a12      	ldr	r2, [pc, #72]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d015      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80054e8:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f6:	490a      	ldr	r1, [pc, #40]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005506:	d105      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005508:	4b05      	ldr	r3, [pc, #20]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	4a04      	ldr	r2, [pc, #16]	; (8005520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800550e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005512:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005514:	7cbb      	ldrb	r3, [r7, #18]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40021000 	.word	0x40021000

08005524 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e09d      	b.n	8005672 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	2b00      	cmp	r3, #0
 800553c:	d108      	bne.n	8005550 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005546:	d009      	beq.n	800555c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	61da      	str	r2, [r3, #28]
 800554e:	e005      	b.n	800555c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fc fa86 	bl	8001a88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005592:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800559c:	d902      	bls.n	80055a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	e002      	b.n	80055aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80055b2:	d007      	beq.n	80055c4 <HAL_SPI_Init+0xa0>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055bc:	d002      	beq.n	80055c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005606:	ea42 0103 	orr.w	r1, r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	0c1b      	lsrs	r3, r3, #16
 8005620:	f003 0204 	and.w	r2, r3, #4
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005640:	ea42 0103 	orr.w	r1, r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69da      	ldr	r2, [r3, #28]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005660:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b088      	sub	sp, #32
 800567e:	af02      	add	r7, sp, #8
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	603b      	str	r3, [r7, #0]
 8005686:	4613      	mov	r3, r2
 8005688:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b01      	cmp	r3, #1
 8005698:	d002      	beq.n	80056a0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800569a:	2302      	movs	r3, #2
 800569c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800569e:	e11a      	b.n	80058d6 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a8:	d112      	bne.n	80056d0 <HAL_SPI_Receive+0x56>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10e      	bne.n	80056d0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2204      	movs	r2, #4
 80056b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80056ba:	88fa      	ldrh	r2, [r7, #6]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	4613      	mov	r3, r2
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 f90e 	bl	80058e8 <HAL_SPI_TransmitReceive>
 80056cc:	4603      	mov	r3, r0
 80056ce:	e107      	b.n	80058e0 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <HAL_SPI_Receive+0x64>
 80056da:	2302      	movs	r3, #2
 80056dc:	e100      	b.n	80058e0 <HAL_SPI_Receive+0x266>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056e6:	f7fc fd3b 	bl	8002160 <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <HAL_SPI_Receive+0x7e>
 80056f2:	88fb      	ldrh	r3, [r7, #6]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d102      	bne.n	80056fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056fc:	e0eb      	b.n	80058d6 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2204      	movs	r2, #4
 8005702:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	88fa      	ldrh	r2, [r7, #6]
 8005716:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	88fa      	ldrh	r2, [r7, #6]
 800571e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005748:	d908      	bls.n	800575c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005758:	605a      	str	r2, [r3, #4]
 800575a:	e007      	b.n	800576c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800576a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005774:	d10f      	bne.n	8005796 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005784:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005794:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a0:	2b40      	cmp	r3, #64	; 0x40
 80057a2:	d007      	beq.n	80057b4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057bc:	d86f      	bhi.n	800589e <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80057be:	e034      	b.n	800582a <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d117      	bne.n	80057fe <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f103 020c 	add.w	r2, r3, #12
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	7812      	ldrb	r2, [r2, #0]
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80057fc:	e015      	b.n	800582a <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057fe:	f7fc fcaf 	bl	8002160 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d803      	bhi.n	8005816 <HAL_SPI_Receive+0x19c>
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005814:	d102      	bne.n	800581c <HAL_SPI_Receive+0x1a2>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d106      	bne.n	800582a <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005828:	e055      	b.n	80058d6 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1c4      	bne.n	80057c0 <HAL_SPI_Receive+0x146>
 8005836:	e038      	b.n	80058aa <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b01      	cmp	r3, #1
 8005844:	d115      	bne.n	8005872 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	b292      	uxth	r2, r2
 8005852:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005858:	1c9a      	adds	r2, r3, #2
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005864:	b29b      	uxth	r3, r3
 8005866:	3b01      	subs	r3, #1
 8005868:	b29a      	uxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005870:	e015      	b.n	800589e <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005872:	f7fc fc75 	bl	8002160 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d803      	bhi.n	800588a <HAL_SPI_Receive+0x210>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005888:	d102      	bne.n	8005890 <HAL_SPI_Receive+0x216>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d106      	bne.n	800589e <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800589c:	e01b      	b.n	80058d6 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1c6      	bne.n	8005838 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 fb5a 	bl	8005f68 <SPI_EndRxTransaction>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	75fb      	strb	r3, [r7, #23]
 80058cc:	e003      	b.n	80058d6 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058de:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08a      	sub	sp, #40	; 0x28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80058f6:	2301      	movs	r3, #1
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_SPI_TransmitReceive+0x26>
 800590a:	2302      	movs	r3, #2
 800590c:	e20a      	b.n	8005d24 <HAL_SPI_TransmitReceive+0x43c>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005916:	f7fc fc23 	bl	8002160 <HAL_GetTick>
 800591a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005922:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800592a:	887b      	ldrh	r3, [r7, #2]
 800592c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800592e:	887b      	ldrh	r3, [r7, #2]
 8005930:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005932:	7efb      	ldrb	r3, [r7, #27]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d00e      	beq.n	8005956 <HAL_SPI_TransmitReceive+0x6e>
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800593e:	d106      	bne.n	800594e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d102      	bne.n	800594e <HAL_SPI_TransmitReceive+0x66>
 8005948:	7efb      	ldrb	r3, [r7, #27]
 800594a:	2b04      	cmp	r3, #4
 800594c:	d003      	beq.n	8005956 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800594e:	2302      	movs	r3, #2
 8005950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005954:	e1e0      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <HAL_SPI_TransmitReceive+0x80>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <HAL_SPI_TransmitReceive+0x80>
 8005962:	887b      	ldrh	r3, [r7, #2]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d103      	bne.n	8005970 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800596e:	e1d3      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b04      	cmp	r3, #4
 800597a:	d003      	beq.n	8005984 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2205      	movs	r2, #5
 8005980:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	887a      	ldrh	r2, [r7, #2]
 8005994:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	887a      	ldrh	r2, [r7, #2]
 800599c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	887a      	ldrh	r2, [r7, #2]
 80059aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	887a      	ldrh	r2, [r7, #2]
 80059b0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059c6:	d802      	bhi.n	80059ce <HAL_SPI_TransmitReceive+0xe6>
 80059c8:	8a3b      	ldrh	r3, [r7, #16]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d908      	bls.n	80059e0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059dc:	605a      	str	r2, [r3, #4]
 80059de:	e007      	b.n	80059f0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059ee:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fa:	2b40      	cmp	r3, #64	; 0x40
 80059fc:	d007      	beq.n	8005a0e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a16:	f240 8081 	bls.w	8005b1c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <HAL_SPI_TransmitReceive+0x140>
 8005a22:	8a7b      	ldrh	r3, [r7, #18]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d16d      	bne.n	8005b04 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	881a      	ldrh	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a38:	1c9a      	adds	r2, r3, #2
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a4c:	e05a      	b.n	8005b04 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d11b      	bne.n	8005a94 <HAL_SPI_TransmitReceive+0x1ac>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d016      	beq.n	8005a94 <HAL_SPI_TransmitReceive+0x1ac>
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d113      	bne.n	8005a94 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a70:	881a      	ldrh	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	1c9a      	adds	r2, r3, #2
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d11c      	bne.n	8005adc <HAL_SPI_TransmitReceive+0x1f4>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d016      	beq.n	8005adc <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68da      	ldr	r2, [r3, #12]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	b292      	uxth	r2, r2
 8005aba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac0:	1c9a      	adds	r2, r3, #2
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005adc:	f7fc fb40 	bl	8002160 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d80b      	bhi.n	8005b04 <HAL_SPI_TransmitReceive+0x21c>
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af2:	d007      	beq.n	8005b04 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005b02:	e109      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d19f      	bne.n	8005a4e <HAL_SPI_TransmitReceive+0x166>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d199      	bne.n	8005a4e <HAL_SPI_TransmitReceive+0x166>
 8005b1a:	e0e3      	b.n	8005ce4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <HAL_SPI_TransmitReceive+0x244>
 8005b24:	8a7b      	ldrh	r3, [r7, #18]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	f040 80cf 	bne.w	8005cca <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d912      	bls.n	8005b5c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	881a      	ldrh	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	1c9a      	adds	r2, r3, #2
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b02      	subs	r3, #2
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b5a:	e0b6      	b.n	8005cca <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	330c      	adds	r3, #12
 8005b66:	7812      	ldrb	r2, [r2, #0]
 8005b68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b82:	e0a2      	b.n	8005cca <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d134      	bne.n	8005bfc <HAL_SPI_TransmitReceive+0x314>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d02f      	beq.n	8005bfc <HAL_SPI_TransmitReceive+0x314>
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d12c      	bne.n	8005bfc <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d912      	bls.n	8005bd2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	881a      	ldrh	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	1c9a      	adds	r2, r3, #2
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b02      	subs	r3, #2
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bd0:	e012      	b.n	8005bf8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	330c      	adds	r3, #12
 8005bdc:	7812      	ldrb	r2, [r2, #0]
 8005bde:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d148      	bne.n	8005c9c <HAL_SPI_TransmitReceive+0x3b4>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d042      	beq.n	8005c9c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d923      	bls.n	8005c6a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68da      	ldr	r2, [r3, #12]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2c:	b292      	uxth	r2, r2
 8005c2e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	1c9a      	adds	r2, r3, #2
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b02      	subs	r3, #2
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d81f      	bhi.n	8005c98 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c66:	605a      	str	r2, [r3, #4]
 8005c68:	e016      	b.n	8005c98 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f103 020c 	add.w	r2, r3, #12
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	7812      	ldrb	r2, [r2, #0]
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c9c:	f7fc fa60 	bl	8002160 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d803      	bhi.n	8005cb4 <HAL_SPI_TransmitReceive+0x3cc>
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb2:	d102      	bne.n	8005cba <HAL_SPI_TransmitReceive+0x3d2>
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d107      	bne.n	8005cca <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005cc8:	e026      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f47f af57 	bne.w	8005b84 <HAL_SPI_TransmitReceive+0x29c>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f47f af50 	bne.w	8005b84 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ce4:	69fa      	ldr	r2, [r7, #28]
 8005ce6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f995 	bl	8006018 <SPI_EndRxTxTransaction>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d005      	beq.n	8005d00 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d0e:	e003      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3728      	adds	r7, #40	; 0x28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	603b      	str	r3, [r7, #0]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d3c:	f7fc fa10 	bl	8002160 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	1a9b      	subs	r3, r3, r2
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	4413      	add	r3, r2
 8005d4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d4c:	f7fc fa08 	bl	8002160 <HAL_GetTick>
 8005d50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d52:	4b39      	ldr	r3, [pc, #228]	; (8005e38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	015b      	lsls	r3, r3, #5
 8005d58:	0d1b      	lsrs	r3, r3, #20
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	fb02 f303 	mul.w	r3, r2, r3
 8005d60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d62:	e054      	b.n	8005e0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6a:	d050      	beq.n	8005e0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d6c:	f7fc f9f8 	bl	8002160 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d902      	bls.n	8005d82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d13d      	bne.n	8005dfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d9a:	d111      	bne.n	8005dc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005da4:	d004      	beq.n	8005db0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dae:	d107      	bne.n	8005dc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dc8:	d10f      	bne.n	8005dea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005de8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e017      	b.n	8005e2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	4013      	ands	r3, r2
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	bf0c      	ite	eq
 8005e1e:	2301      	moveq	r3, #1
 8005e20:	2300      	movne	r3, #0
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	461a      	mov	r2, r3
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d19b      	bne.n	8005d64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3720      	adds	r7, #32
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000000 	.word	0x20000000

08005e3c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08a      	sub	sp, #40	; 0x28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005e4e:	f7fc f987 	bl	8002160 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e56:	1a9b      	subs	r3, r3, r2
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005e5e:	f7fc f97f 	bl	8002160 <HAL_GetTick>
 8005e62:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	330c      	adds	r3, #12
 8005e6a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e6c:	4b3d      	ldr	r3, [pc, #244]	; (8005f64 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	4613      	mov	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	00da      	lsls	r2, r3, #3
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	0d1b      	lsrs	r3, r3, #20
 8005e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e7e:	fb02 f303 	mul.w	r3, r2, r3
 8005e82:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005e84:	e060      	b.n	8005f48 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e8c:	d107      	bne.n	8005e9e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d104      	bne.n	8005e9e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005e9c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea4:	d050      	beq.n	8005f48 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ea6:	f7fc f95b 	bl	8002160 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d902      	bls.n	8005ebc <SPI_WaitFifoStateUntilTimeout+0x80>
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d13d      	bne.n	8005f38 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005eca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ed4:	d111      	bne.n	8005efa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ede:	d004      	beq.n	8005eea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee8:	d107      	bne.n	8005efa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ef8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f02:	d10f      	bne.n	8005f24 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f22:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e010      	b.n	8005f5a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	3b01      	subs	r3, #1
 8005f46:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	4013      	ands	r3, r2
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d196      	bne.n	8005e86 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3728      	adds	r7, #40	; 0x28
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	20000000 	.word	0x20000000

08005f68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f7c:	d111      	bne.n	8005fa2 <SPI_EndRxTransaction+0x3a>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f86:	d004      	beq.n	8005f92 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f90:	d107      	bne.n	8005fa2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fa0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2180      	movs	r1, #128	; 0x80
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f7ff febd 	bl	8005d2c <SPI_WaitFlagStateUntilTimeout>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d007      	beq.n	8005fc8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fbc:	f043 0220 	orr.w	r2, r3, #32
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e023      	b.n	8006010 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fd0:	d11d      	bne.n	800600e <SPI_EndRxTransaction+0xa6>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fda:	d004      	beq.n	8005fe6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe4:	d113      	bne.n	800600e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f7ff ff22 	bl	8005e3c <SPI_WaitFifoStateUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d007      	beq.n	800600e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006002:	f043 0220 	orr.w	r2, r3, #32
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e000      	b.n	8006010 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af02      	add	r7, sp, #8
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2200      	movs	r2, #0
 800602c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f7ff ff03 	bl	8005e3c <SPI_WaitFifoStateUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d007      	beq.n	800604c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006040:	f043 0220 	orr.w	r2, r3, #32
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e027      	b.n	800609c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2200      	movs	r2, #0
 8006054:	2180      	movs	r1, #128	; 0x80
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f7ff fe68 	bl	8005d2c <SPI_WaitFlagStateUntilTimeout>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d007      	beq.n	8006072 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006066:	f043 0220 	orr.w	r2, r3, #32
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e014      	b.n	800609c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2200      	movs	r2, #0
 800607a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f7ff fedc 	bl	8005e3c <SPI_WaitFifoStateUntilTimeout>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d007      	beq.n	800609a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800608e:	f043 0220 	orr.w	r2, r3, #32
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e000      	b.n	800609c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e049      	b.n	800614a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d106      	bne.n	80060d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fb ff0c 	bl	8001ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3304      	adds	r3, #4
 80060e0:	4619      	mov	r1, r3
 80060e2:	4610      	mov	r0, r2
 80060e4:	f000 fdf4 	bl	8006cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b01      	cmp	r3, #1
 8006166:	d001      	beq.n	800616c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e042      	b.n	80061f2 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a21      	ldr	r2, [pc, #132]	; (8006200 <HAL_TIM_Base_Start+0xac>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d018      	beq.n	80061b0 <HAL_TIM_Base_Start+0x5c>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006186:	d013      	beq.n	80061b0 <HAL_TIM_Base_Start+0x5c>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a1d      	ldr	r2, [pc, #116]	; (8006204 <HAL_TIM_Base_Start+0xb0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00e      	beq.n	80061b0 <HAL_TIM_Base_Start+0x5c>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a1c      	ldr	r2, [pc, #112]	; (8006208 <HAL_TIM_Base_Start+0xb4>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d009      	beq.n	80061b0 <HAL_TIM_Base_Start+0x5c>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a1a      	ldr	r2, [pc, #104]	; (800620c <HAL_TIM_Base_Start+0xb8>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d004      	beq.n	80061b0 <HAL_TIM_Base_Start+0x5c>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a19      	ldr	r2, [pc, #100]	; (8006210 <HAL_TIM_Base_Start+0xbc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d115      	bne.n	80061dc <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	4b17      	ldr	r3, [pc, #92]	; (8006214 <HAL_TIM_Base_Start+0xc0>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b06      	cmp	r3, #6
 80061c0:	d015      	beq.n	80061ee <HAL_TIM_Base_Start+0x9a>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c8:	d011      	beq.n	80061ee <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0201 	orr.w	r2, r2, #1
 80061d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061da:	e008      	b.n	80061ee <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0201 	orr.w	r2, r2, #1
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	e000      	b.n	80061f0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40012c00 	.word	0x40012c00
 8006204:	40000400 	.word	0x40000400
 8006208:	40000800 	.word	0x40000800
 800620c:	40013400 	.word	0x40013400
 8006210:	40014000 	.word	0x40014000
 8006214:	00010007 	.word	0x00010007

08006218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b01      	cmp	r3, #1
 800622a:	d001      	beq.n	8006230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e04a      	b.n	80062c6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0201 	orr.w	r2, r2, #1
 8006246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a21      	ldr	r2, [pc, #132]	; (80062d4 <HAL_TIM_Base_Start_IT+0xbc>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d018      	beq.n	8006284 <HAL_TIM_Base_Start_IT+0x6c>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800625a:	d013      	beq.n	8006284 <HAL_TIM_Base_Start_IT+0x6c>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a1d      	ldr	r2, [pc, #116]	; (80062d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d00e      	beq.n	8006284 <HAL_TIM_Base_Start_IT+0x6c>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a1c      	ldr	r2, [pc, #112]	; (80062dc <HAL_TIM_Base_Start_IT+0xc4>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d009      	beq.n	8006284 <HAL_TIM_Base_Start_IT+0x6c>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a1a      	ldr	r2, [pc, #104]	; (80062e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d004      	beq.n	8006284 <HAL_TIM_Base_Start_IT+0x6c>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a19      	ldr	r2, [pc, #100]	; (80062e4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d115      	bne.n	80062b0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689a      	ldr	r2, [r3, #8]
 800628a:	4b17      	ldr	r3, [pc, #92]	; (80062e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800628c:	4013      	ands	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2b06      	cmp	r3, #6
 8006294:	d015      	beq.n	80062c2 <HAL_TIM_Base_Start_IT+0xaa>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800629c:	d011      	beq.n	80062c2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f042 0201 	orr.w	r2, r2, #1
 80062ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ae:	e008      	b.n	80062c2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	e000      	b.n	80062c4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	40012c00 	.word	0x40012c00
 80062d8:	40000400 	.word	0x40000400
 80062dc:	40000800 	.word	0x40000800
 80062e0:	40013400 	.word	0x40013400
 80062e4:	40014000 	.word	0x40014000
 80062e8:	00010007 	.word	0x00010007

080062ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e049      	b.n	8006392 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d106      	bne.n	8006318 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f841 	bl	800639a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3304      	adds	r3, #4
 8006328:	4619      	mov	r1, r3
 800632a:	4610      	mov	r0, r2
 800632c:	f000 fcd0 	bl	8006cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
	...

080063b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d109      	bne.n	80063d4 <HAL_TIM_PWM_Start+0x24>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	bf14      	ite	ne
 80063cc:	2301      	movne	r3, #1
 80063ce:	2300      	moveq	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	e03c      	b.n	800644e <HAL_TIM_PWM_Start+0x9e>
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d109      	bne.n	80063ee <HAL_TIM_PWM_Start+0x3e>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	bf14      	ite	ne
 80063e6:	2301      	movne	r3, #1
 80063e8:	2300      	moveq	r3, #0
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	e02f      	b.n	800644e <HAL_TIM_PWM_Start+0x9e>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d109      	bne.n	8006408 <HAL_TIM_PWM_Start+0x58>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	bf14      	ite	ne
 8006400:	2301      	movne	r3, #1
 8006402:	2300      	moveq	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	e022      	b.n	800644e <HAL_TIM_PWM_Start+0x9e>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2b0c      	cmp	r3, #12
 800640c:	d109      	bne.n	8006422 <HAL_TIM_PWM_Start+0x72>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b01      	cmp	r3, #1
 8006418:	bf14      	ite	ne
 800641a:	2301      	movne	r3, #1
 800641c:	2300      	moveq	r3, #0
 800641e:	b2db      	uxtb	r3, r3
 8006420:	e015      	b.n	800644e <HAL_TIM_PWM_Start+0x9e>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b10      	cmp	r3, #16
 8006426:	d109      	bne.n	800643c <HAL_TIM_PWM_Start+0x8c>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b01      	cmp	r3, #1
 8006432:	bf14      	ite	ne
 8006434:	2301      	movne	r3, #1
 8006436:	2300      	moveq	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	e008      	b.n	800644e <HAL_TIM_PWM_Start+0x9e>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b01      	cmp	r3, #1
 8006446:	bf14      	ite	ne
 8006448:	2301      	movne	r3, #1
 800644a:	2300      	moveq	r3, #0
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e097      	b.n	8006586 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d104      	bne.n	8006466 <HAL_TIM_PWM_Start+0xb6>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2202      	movs	r2, #2
 8006460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006464:	e023      	b.n	80064ae <HAL_TIM_PWM_Start+0xfe>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b04      	cmp	r3, #4
 800646a:	d104      	bne.n	8006476 <HAL_TIM_PWM_Start+0xc6>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006474:	e01b      	b.n	80064ae <HAL_TIM_PWM_Start+0xfe>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b08      	cmp	r3, #8
 800647a:	d104      	bne.n	8006486 <HAL_TIM_PWM_Start+0xd6>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006484:	e013      	b.n	80064ae <HAL_TIM_PWM_Start+0xfe>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b0c      	cmp	r3, #12
 800648a:	d104      	bne.n	8006496 <HAL_TIM_PWM_Start+0xe6>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006494:	e00b      	b.n	80064ae <HAL_TIM_PWM_Start+0xfe>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b10      	cmp	r3, #16
 800649a:	d104      	bne.n	80064a6 <HAL_TIM_PWM_Start+0xf6>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064a4:	e003      	b.n	80064ae <HAL_TIM_PWM_Start+0xfe>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2202      	movs	r2, #2
 80064aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2201      	movs	r2, #1
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f001 f838 	bl	800752c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a33      	ldr	r2, [pc, #204]	; (8006590 <HAL_TIM_PWM_Start+0x1e0>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d013      	beq.n	80064ee <HAL_TIM_PWM_Start+0x13e>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a32      	ldr	r2, [pc, #200]	; (8006594 <HAL_TIM_PWM_Start+0x1e4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d00e      	beq.n	80064ee <HAL_TIM_PWM_Start+0x13e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a30      	ldr	r2, [pc, #192]	; (8006598 <HAL_TIM_PWM_Start+0x1e8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d009      	beq.n	80064ee <HAL_TIM_PWM_Start+0x13e>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a2f      	ldr	r2, [pc, #188]	; (800659c <HAL_TIM_PWM_Start+0x1ec>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d004      	beq.n	80064ee <HAL_TIM_PWM_Start+0x13e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a2d      	ldr	r2, [pc, #180]	; (80065a0 <HAL_TIM_PWM_Start+0x1f0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d101      	bne.n	80064f2 <HAL_TIM_PWM_Start+0x142>
 80064ee:	2301      	movs	r3, #1
 80064f0:	e000      	b.n	80064f4 <HAL_TIM_PWM_Start+0x144>
 80064f2:	2300      	movs	r3, #0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d007      	beq.n	8006508 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006506:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a20      	ldr	r2, [pc, #128]	; (8006590 <HAL_TIM_PWM_Start+0x1e0>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d018      	beq.n	8006544 <HAL_TIM_PWM_Start+0x194>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800651a:	d013      	beq.n	8006544 <HAL_TIM_PWM_Start+0x194>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a20      	ldr	r2, [pc, #128]	; (80065a4 <HAL_TIM_PWM_Start+0x1f4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00e      	beq.n	8006544 <HAL_TIM_PWM_Start+0x194>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1f      	ldr	r2, [pc, #124]	; (80065a8 <HAL_TIM_PWM_Start+0x1f8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d009      	beq.n	8006544 <HAL_TIM_PWM_Start+0x194>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a17      	ldr	r2, [pc, #92]	; (8006594 <HAL_TIM_PWM_Start+0x1e4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d004      	beq.n	8006544 <HAL_TIM_PWM_Start+0x194>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a16      	ldr	r2, [pc, #88]	; (8006598 <HAL_TIM_PWM_Start+0x1e8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d115      	bne.n	8006570 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	4b18      	ldr	r3, [pc, #96]	; (80065ac <HAL_TIM_PWM_Start+0x1fc>)
 800654c:	4013      	ands	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b06      	cmp	r3, #6
 8006554:	d015      	beq.n	8006582 <HAL_TIM_PWM_Start+0x1d2>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655c:	d011      	beq.n	8006582 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0201 	orr.w	r2, r2, #1
 800656c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800656e:	e008      	b.n	8006582 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0201 	orr.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	e000      	b.n	8006584 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006582:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	40012c00 	.word	0x40012c00
 8006594:	40013400 	.word	0x40013400
 8006598:	40014000 	.word	0x40014000
 800659c:	40014400 	.word	0x40014400
 80065a0:	40014800 	.word	0x40014800
 80065a4:	40000400 	.word	0x40000400
 80065a8:	40000800 	.word	0x40000800
 80065ac:	00010007 	.word	0x00010007

080065b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d020      	beq.n	8006614 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d01b      	beq.n	8006614 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f06f 0202 	mvn.w	r2, #2
 80065e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fb4a 	bl	8006c94 <HAL_TIM_IC_CaptureCallback>
 8006600:	e005      	b.n	800660e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fb3c 	bl	8006c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fb4d 	bl	8006ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f003 0304 	and.w	r3, r3, #4
 800661a:	2b00      	cmp	r3, #0
 800661c:	d020      	beq.n	8006660 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	d01b      	beq.n	8006660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0204 	mvn.w	r2, #4
 8006630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2202      	movs	r2, #2
 8006636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fb24 	bl	8006c94 <HAL_TIM_IC_CaptureCallback>
 800664c:	e005      	b.n	800665a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fb16 	bl	8006c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fb27 	bl	8006ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f003 0308 	and.w	r3, r3, #8
 8006666:	2b00      	cmp	r3, #0
 8006668:	d020      	beq.n	80066ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f003 0308 	and.w	r3, r3, #8
 8006670:	2b00      	cmp	r3, #0
 8006672:	d01b      	beq.n	80066ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f06f 0208 	mvn.w	r2, #8
 800667c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2204      	movs	r2, #4
 8006682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	f003 0303 	and.w	r3, r3, #3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fafe 	bl	8006c94 <HAL_TIM_IC_CaptureCallback>
 8006698:	e005      	b.n	80066a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 faf0 	bl	8006c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fb01 	bl	8006ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f003 0310 	and.w	r3, r3, #16
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d020      	beq.n	80066f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f003 0310 	and.w	r3, r3, #16
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01b      	beq.n	80066f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f06f 0210 	mvn.w	r2, #16
 80066c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2208      	movs	r2, #8
 80066ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fad8 	bl	8006c94 <HAL_TIM_IC_CaptureCallback>
 80066e4:	e005      	b.n	80066f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 faca 	bl	8006c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fadb 	bl	8006ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00c      	beq.n	800671c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d007      	beq.n	800671c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f06f 0201 	mvn.w	r2, #1
 8006714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 faa8 	bl	8006c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006722:	2b00      	cmp	r3, #0
 8006724:	d104      	bne.n	8006730 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00c      	beq.n	800674a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006736:	2b00      	cmp	r3, #0
 8006738:	d007      	beq.n	800674a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 f8e3 	bl	8007910 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00c      	beq.n	800676e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675a:	2b00      	cmp	r3, #0
 800675c:	d007      	beq.n	800676e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f001 f8db 	bl	8007924 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00c      	beq.n	8006792 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b00      	cmp	r3, #0
 8006780:	d007      	beq.n	8006792 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800678a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fa95 	bl	8006cbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f003 0320 	and.w	r3, r3, #32
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00c      	beq.n	80067b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f003 0320 	and.w	r3, r3, #32
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d007      	beq.n	80067b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f06f 0220 	mvn.w	r2, #32
 80067ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f001 f8a3 	bl	80078fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00c      	beq.n	80067da <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d007      	beq.n	80067da <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80067d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f001 f8af 	bl	8007938 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00c      	beq.n	80067fe <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d007      	beq.n	80067fe <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80067f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 f8a7 	bl	800794c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00c      	beq.n	8006822 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d007      	beq.n	8006822 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800681a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f001 f89f 	bl	8007960 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00c      	beq.n	8006846 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d007      	beq.n	8006846 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800683e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f001 f897 	bl	8007974 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006846:	bf00      	nop
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006866:	2b01      	cmp	r3, #1
 8006868:	d101      	bne.n	800686e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800686a:	2302      	movs	r3, #2
 800686c:	e0ff      	b.n	8006a6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b14      	cmp	r3, #20
 800687a:	f200 80f0 	bhi.w	8006a5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800687e:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	080068d9 	.word	0x080068d9
 8006888:	08006a5f 	.word	0x08006a5f
 800688c:	08006a5f 	.word	0x08006a5f
 8006890:	08006a5f 	.word	0x08006a5f
 8006894:	08006919 	.word	0x08006919
 8006898:	08006a5f 	.word	0x08006a5f
 800689c:	08006a5f 	.word	0x08006a5f
 80068a0:	08006a5f 	.word	0x08006a5f
 80068a4:	0800695b 	.word	0x0800695b
 80068a8:	08006a5f 	.word	0x08006a5f
 80068ac:	08006a5f 	.word	0x08006a5f
 80068b0:	08006a5f 	.word	0x08006a5f
 80068b4:	0800699b 	.word	0x0800699b
 80068b8:	08006a5f 	.word	0x08006a5f
 80068bc:	08006a5f 	.word	0x08006a5f
 80068c0:	08006a5f 	.word	0x08006a5f
 80068c4:	080069dd 	.word	0x080069dd
 80068c8:	08006a5f 	.word	0x08006a5f
 80068cc:	08006a5f 	.word	0x08006a5f
 80068d0:	08006a5f 	.word	0x08006a5f
 80068d4:	08006a1d 	.word	0x08006a1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68b9      	ldr	r1, [r7, #8]
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fa92 	bl	8006e08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699a      	ldr	r2, [r3, #24]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0208 	orr.w	r2, r2, #8
 80068f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699a      	ldr	r2, [r3, #24]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 0204 	bic.w	r2, r2, #4
 8006902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6999      	ldr	r1, [r3, #24]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	691a      	ldr	r2, [r3, #16]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	619a      	str	r2, [r3, #24]
      break;
 8006916:	e0a5      	b.n	8006a64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68b9      	ldr	r1, [r7, #8]
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fb02 	bl	8006f28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	699a      	ldr	r2, [r3, #24]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699a      	ldr	r2, [r3, #24]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6999      	ldr	r1, [r3, #24]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	021a      	lsls	r2, r3, #8
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	619a      	str	r2, [r3, #24]
      break;
 8006958:	e084      	b.n	8006a64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68b9      	ldr	r1, [r7, #8]
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fb6b 	bl	800703c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	69da      	ldr	r2, [r3, #28]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f042 0208 	orr.w	r2, r2, #8
 8006974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69da      	ldr	r2, [r3, #28]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0204 	bic.w	r2, r2, #4
 8006984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69d9      	ldr	r1, [r3, #28]
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	691a      	ldr	r2, [r3, #16]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	61da      	str	r2, [r3, #28]
      break;
 8006998:	e064      	b.n	8006a64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 fbd3 	bl	800714c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69da      	ldr	r2, [r3, #28]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	69da      	ldr	r2, [r3, #28]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69d9      	ldr	r1, [r3, #28]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	021a      	lsls	r2, r3, #8
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	61da      	str	r2, [r3, #28]
      break;
 80069da:	e043      	b.n	8006a64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68b9      	ldr	r1, [r7, #8]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fc3c 	bl	8007260 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0208 	orr.w	r2, r2, #8
 80069f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0204 	bic.w	r2, r2, #4
 8006a06:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	691a      	ldr	r2, [r3, #16]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006a1a:	e023      	b.n	8006a64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68b9      	ldr	r1, [r7, #8]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fc80 	bl	8007328 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a36:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a46:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	021a      	lsls	r2, r3, #8
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006a5c:	e002      	b.n	8006a64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	75fb      	strb	r3, [r7, #23]
      break;
 8006a62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop

08006a78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <HAL_TIM_ConfigClockSource+0x1c>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e0de      	b.n	8006c52 <HAL_TIM_ConfigClockSource+0x1da>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006ab2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006abe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a63      	ldr	r2, [pc, #396]	; (8006c5c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	f000 80a9 	beq.w	8006c26 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ad4:	4a61      	ldr	r2, [pc, #388]	; (8006c5c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	f200 80ae 	bhi.w	8006c38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006adc:	4a60      	ldr	r2, [pc, #384]	; (8006c60 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	f000 80a1 	beq.w	8006c26 <HAL_TIM_ConfigClockSource+0x1ae>
 8006ae4:	4a5e      	ldr	r2, [pc, #376]	; (8006c60 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	f200 80a6 	bhi.w	8006c38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006aec:	4a5d      	ldr	r2, [pc, #372]	; (8006c64 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	f000 8099 	beq.w	8006c26 <HAL_TIM_ConfigClockSource+0x1ae>
 8006af4:	4a5b      	ldr	r2, [pc, #364]	; (8006c64 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	f200 809e 	bhi.w	8006c38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006afc:	4a5a      	ldr	r2, [pc, #360]	; (8006c68 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	f000 8091 	beq.w	8006c26 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b04:	4a58      	ldr	r2, [pc, #352]	; (8006c68 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	f200 8096 	bhi.w	8006c38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006b10:	f000 8089 	beq.w	8006c26 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006b18:	f200 808e 	bhi.w	8006c38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b20:	d03e      	beq.n	8006ba0 <HAL_TIM_ConfigClockSource+0x128>
 8006b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b26:	f200 8087 	bhi.w	8006c38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b2e:	f000 8086 	beq.w	8006c3e <HAL_TIM_ConfigClockSource+0x1c6>
 8006b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b36:	d87f      	bhi.n	8006c38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b38:	2b70      	cmp	r3, #112	; 0x70
 8006b3a:	d01a      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0xfa>
 8006b3c:	2b70      	cmp	r3, #112	; 0x70
 8006b3e:	d87b      	bhi.n	8006c38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b40:	2b60      	cmp	r3, #96	; 0x60
 8006b42:	d050      	beq.n	8006be6 <HAL_TIM_ConfigClockSource+0x16e>
 8006b44:	2b60      	cmp	r3, #96	; 0x60
 8006b46:	d877      	bhi.n	8006c38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b48:	2b50      	cmp	r3, #80	; 0x50
 8006b4a:	d03c      	beq.n	8006bc6 <HAL_TIM_ConfigClockSource+0x14e>
 8006b4c:	2b50      	cmp	r3, #80	; 0x50
 8006b4e:	d873      	bhi.n	8006c38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b50:	2b40      	cmp	r3, #64	; 0x40
 8006b52:	d058      	beq.n	8006c06 <HAL_TIM_ConfigClockSource+0x18e>
 8006b54:	2b40      	cmp	r3, #64	; 0x40
 8006b56:	d86f      	bhi.n	8006c38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b58:	2b30      	cmp	r3, #48	; 0x30
 8006b5a:	d064      	beq.n	8006c26 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b5c:	2b30      	cmp	r3, #48	; 0x30
 8006b5e:	d86b      	bhi.n	8006c38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	d060      	beq.n	8006c26 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b64:	2b20      	cmp	r3, #32
 8006b66:	d867      	bhi.n	8006c38 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d05c      	beq.n	8006c26 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b6c:	2b10      	cmp	r3, #16
 8006b6e:	d05a      	beq.n	8006c26 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b70:	e062      	b.n	8006c38 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6818      	ldr	r0, [r3, #0]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	6899      	ldr	r1, [r3, #8]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f000 fcb3 	bl	80074ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	609a      	str	r2, [r3, #8]
      break;
 8006b9e:	e04f      	b.n	8006c40 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6818      	ldr	r0, [r3, #0]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	6899      	ldr	r1, [r3, #8]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f000 fc9c 	bl	80074ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bc2:	609a      	str	r2, [r3, #8]
      break;
 8006bc4:	e03c      	b.n	8006c40 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6818      	ldr	r0, [r3, #0]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	6859      	ldr	r1, [r3, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f000 fc0e 	bl	80073f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2150      	movs	r1, #80	; 0x50
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fc67 	bl	80074b2 <TIM_ITRx_SetConfig>
      break;
 8006be4:	e02c      	b.n	8006c40 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6818      	ldr	r0, [r3, #0]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	6859      	ldr	r1, [r3, #4]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f000 fc2d 	bl	8007452 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2160      	movs	r1, #96	; 0x60
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 fc57 	bl	80074b2 <TIM_ITRx_SetConfig>
      break;
 8006c04:	e01c      	b.n	8006c40 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6818      	ldr	r0, [r3, #0]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	6859      	ldr	r1, [r3, #4]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	461a      	mov	r2, r3
 8006c14:	f000 fbee 	bl	80073f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2140      	movs	r1, #64	; 0x40
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 fc47 	bl	80074b2 <TIM_ITRx_SetConfig>
      break;
 8006c24:	e00c      	b.n	8006c40 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	4610      	mov	r0, r2
 8006c32:	f000 fc3e 	bl	80074b2 <TIM_ITRx_SetConfig>
      break;
 8006c36:	e003      	b.n	8006c40 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c3c:	e000      	b.n	8006c40 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	00100070 	.word	0x00100070
 8006c60:	00100040 	.word	0x00100040
 8006c64:	00100030 	.word	0x00100030
 8006c68:	00100020 	.word	0x00100020

08006c6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a42      	ldr	r2, [pc, #264]	; (8006dec <TIM_Base_SetConfig+0x11c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00f      	beq.n	8006d08 <TIM_Base_SetConfig+0x38>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cee:	d00b      	beq.n	8006d08 <TIM_Base_SetConfig+0x38>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a3f      	ldr	r2, [pc, #252]	; (8006df0 <TIM_Base_SetConfig+0x120>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d007      	beq.n	8006d08 <TIM_Base_SetConfig+0x38>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a3e      	ldr	r2, [pc, #248]	; (8006df4 <TIM_Base_SetConfig+0x124>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d003      	beq.n	8006d08 <TIM_Base_SetConfig+0x38>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a3d      	ldr	r2, [pc, #244]	; (8006df8 <TIM_Base_SetConfig+0x128>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d108      	bne.n	8006d1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a33      	ldr	r2, [pc, #204]	; (8006dec <TIM_Base_SetConfig+0x11c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d01b      	beq.n	8006d5a <TIM_Base_SetConfig+0x8a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d28:	d017      	beq.n	8006d5a <TIM_Base_SetConfig+0x8a>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a30      	ldr	r2, [pc, #192]	; (8006df0 <TIM_Base_SetConfig+0x120>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d013      	beq.n	8006d5a <TIM_Base_SetConfig+0x8a>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a2f      	ldr	r2, [pc, #188]	; (8006df4 <TIM_Base_SetConfig+0x124>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d00f      	beq.n	8006d5a <TIM_Base_SetConfig+0x8a>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a2e      	ldr	r2, [pc, #184]	; (8006df8 <TIM_Base_SetConfig+0x128>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d00b      	beq.n	8006d5a <TIM_Base_SetConfig+0x8a>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a2d      	ldr	r2, [pc, #180]	; (8006dfc <TIM_Base_SetConfig+0x12c>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d007      	beq.n	8006d5a <TIM_Base_SetConfig+0x8a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a2c      	ldr	r2, [pc, #176]	; (8006e00 <TIM_Base_SetConfig+0x130>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d003      	beq.n	8006d5a <TIM_Base_SetConfig+0x8a>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a2b      	ldr	r2, [pc, #172]	; (8006e04 <TIM_Base_SetConfig+0x134>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d108      	bne.n	8006d6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a16      	ldr	r2, [pc, #88]	; (8006dec <TIM_Base_SetConfig+0x11c>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d00f      	beq.n	8006db8 <TIM_Base_SetConfig+0xe8>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a17      	ldr	r2, [pc, #92]	; (8006df8 <TIM_Base_SetConfig+0x128>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d00b      	beq.n	8006db8 <TIM_Base_SetConfig+0xe8>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a16      	ldr	r2, [pc, #88]	; (8006dfc <TIM_Base_SetConfig+0x12c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d007      	beq.n	8006db8 <TIM_Base_SetConfig+0xe8>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a15      	ldr	r2, [pc, #84]	; (8006e00 <TIM_Base_SetConfig+0x130>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d003      	beq.n	8006db8 <TIM_Base_SetConfig+0xe8>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a14      	ldr	r2, [pc, #80]	; (8006e04 <TIM_Base_SetConfig+0x134>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d103      	bne.n	8006dc0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	691a      	ldr	r2, [r3, #16]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d105      	bne.n	8006dde <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f023 0201 	bic.w	r2, r3, #1
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	611a      	str	r2, [r3, #16]
  }
}
 8006dde:	bf00      	nop
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	40012c00 	.word	0x40012c00
 8006df0:	40000400 	.word	0x40000400
 8006df4:	40000800 	.word	0x40000800
 8006df8:	40013400 	.word	0x40013400
 8006dfc:	40014000 	.word	0x40014000
 8006e00:	40014400 	.word	0x40014400
 8006e04:	40014800 	.word	0x40014800

08006e08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	f023 0201 	bic.w	r2, r3, #1
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 0303 	bic.w	r3, r3, #3
 8006e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f023 0302 	bic.w	r3, r3, #2
 8006e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a2c      	ldr	r2, [pc, #176]	; (8006f14 <TIM_OC1_SetConfig+0x10c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00f      	beq.n	8006e88 <TIM_OC1_SetConfig+0x80>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a2b      	ldr	r2, [pc, #172]	; (8006f18 <TIM_OC1_SetConfig+0x110>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00b      	beq.n	8006e88 <TIM_OC1_SetConfig+0x80>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a2a      	ldr	r2, [pc, #168]	; (8006f1c <TIM_OC1_SetConfig+0x114>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d007      	beq.n	8006e88 <TIM_OC1_SetConfig+0x80>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a29      	ldr	r2, [pc, #164]	; (8006f20 <TIM_OC1_SetConfig+0x118>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d003      	beq.n	8006e88 <TIM_OC1_SetConfig+0x80>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a28      	ldr	r2, [pc, #160]	; (8006f24 <TIM_OC1_SetConfig+0x11c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d10c      	bne.n	8006ea2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f023 0308 	bic.w	r3, r3, #8
 8006e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f023 0304 	bic.w	r3, r3, #4
 8006ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a1b      	ldr	r2, [pc, #108]	; (8006f14 <TIM_OC1_SetConfig+0x10c>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00f      	beq.n	8006eca <TIM_OC1_SetConfig+0xc2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a1a      	ldr	r2, [pc, #104]	; (8006f18 <TIM_OC1_SetConfig+0x110>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d00b      	beq.n	8006eca <TIM_OC1_SetConfig+0xc2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a19      	ldr	r2, [pc, #100]	; (8006f1c <TIM_OC1_SetConfig+0x114>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d007      	beq.n	8006eca <TIM_OC1_SetConfig+0xc2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a18      	ldr	r2, [pc, #96]	; (8006f20 <TIM_OC1_SetConfig+0x118>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d003      	beq.n	8006eca <TIM_OC1_SetConfig+0xc2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a17      	ldr	r2, [pc, #92]	; (8006f24 <TIM_OC1_SetConfig+0x11c>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d111      	bne.n	8006eee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	621a      	str	r2, [r3, #32]
}
 8006f08:	bf00      	nop
 8006f0a:	371c      	adds	r7, #28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	40012c00 	.word	0x40012c00
 8006f18:	40013400 	.word	0x40013400
 8006f1c:	40014000 	.word	0x40014000
 8006f20:	40014400 	.word	0x40014400
 8006f24:	40014800 	.word	0x40014800

08006f28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	f023 0210 	bic.w	r2, r3, #16
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	021b      	lsls	r3, r3, #8
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f023 0320 	bic.w	r3, r3, #32
 8006f76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	011b      	lsls	r3, r3, #4
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a28      	ldr	r2, [pc, #160]	; (8007028 <TIM_OC2_SetConfig+0x100>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d003      	beq.n	8006f94 <TIM_OC2_SetConfig+0x6c>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a27      	ldr	r2, [pc, #156]	; (800702c <TIM_OC2_SetConfig+0x104>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d10d      	bne.n	8006fb0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	011b      	lsls	r3, r3, #4
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a1d      	ldr	r2, [pc, #116]	; (8007028 <TIM_OC2_SetConfig+0x100>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00f      	beq.n	8006fd8 <TIM_OC2_SetConfig+0xb0>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a1c      	ldr	r2, [pc, #112]	; (800702c <TIM_OC2_SetConfig+0x104>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d00b      	beq.n	8006fd8 <TIM_OC2_SetConfig+0xb0>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a1b      	ldr	r2, [pc, #108]	; (8007030 <TIM_OC2_SetConfig+0x108>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d007      	beq.n	8006fd8 <TIM_OC2_SetConfig+0xb0>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a1a      	ldr	r2, [pc, #104]	; (8007034 <TIM_OC2_SetConfig+0x10c>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d003      	beq.n	8006fd8 <TIM_OC2_SetConfig+0xb0>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a19      	ldr	r2, [pc, #100]	; (8007038 <TIM_OC2_SetConfig+0x110>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d113      	bne.n	8007000 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	621a      	str	r2, [r3, #32]
}
 800701a:	bf00      	nop
 800701c:	371c      	adds	r7, #28
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	40012c00 	.word	0x40012c00
 800702c:	40013400 	.word	0x40013400
 8007030:	40014000 	.word	0x40014000
 8007034:	40014400 	.word	0x40014400
 8007038:	40014800 	.word	0x40014800

0800703c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800706a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f023 0303 	bic.w	r3, r3, #3
 8007076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	021b      	lsls	r3, r3, #8
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a27      	ldr	r2, [pc, #156]	; (8007138 <TIM_OC3_SetConfig+0xfc>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d003      	beq.n	80070a6 <TIM_OC3_SetConfig+0x6a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a26      	ldr	r2, [pc, #152]	; (800713c <TIM_OC3_SetConfig+0x100>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d10d      	bne.n	80070c2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	021b      	lsls	r3, r3, #8
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a1c      	ldr	r2, [pc, #112]	; (8007138 <TIM_OC3_SetConfig+0xfc>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d00f      	beq.n	80070ea <TIM_OC3_SetConfig+0xae>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a1b      	ldr	r2, [pc, #108]	; (800713c <TIM_OC3_SetConfig+0x100>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00b      	beq.n	80070ea <TIM_OC3_SetConfig+0xae>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a1a      	ldr	r2, [pc, #104]	; (8007140 <TIM_OC3_SetConfig+0x104>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d007      	beq.n	80070ea <TIM_OC3_SetConfig+0xae>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a19      	ldr	r2, [pc, #100]	; (8007144 <TIM_OC3_SetConfig+0x108>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d003      	beq.n	80070ea <TIM_OC3_SetConfig+0xae>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a18      	ldr	r2, [pc, #96]	; (8007148 <TIM_OC3_SetConfig+0x10c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d113      	bne.n	8007112 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	4313      	orrs	r3, r2
 8007104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	011b      	lsls	r3, r3, #4
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	4313      	orrs	r3, r2
 8007110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	621a      	str	r2, [r3, #32]
}
 800712c:	bf00      	nop
 800712e:	371c      	adds	r7, #28
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	40012c00 	.word	0x40012c00
 800713c:	40013400 	.word	0x40013400
 8007140:	40014000 	.word	0x40014000
 8007144:	40014400 	.word	0x40014400
 8007148:	40014800 	.word	0x40014800

0800714c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800717a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800717e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	021b      	lsls	r3, r3, #8
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	4313      	orrs	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800719a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	031b      	lsls	r3, r3, #12
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a28      	ldr	r2, [pc, #160]	; (800724c <TIM_OC4_SetConfig+0x100>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d003      	beq.n	80071b8 <TIM_OC4_SetConfig+0x6c>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a27      	ldr	r2, [pc, #156]	; (8007250 <TIM_OC4_SetConfig+0x104>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d10d      	bne.n	80071d4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	031b      	lsls	r3, r3, #12
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a1d      	ldr	r2, [pc, #116]	; (800724c <TIM_OC4_SetConfig+0x100>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d00f      	beq.n	80071fc <TIM_OC4_SetConfig+0xb0>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a1c      	ldr	r2, [pc, #112]	; (8007250 <TIM_OC4_SetConfig+0x104>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00b      	beq.n	80071fc <TIM_OC4_SetConfig+0xb0>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a1b      	ldr	r2, [pc, #108]	; (8007254 <TIM_OC4_SetConfig+0x108>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d007      	beq.n	80071fc <TIM_OC4_SetConfig+0xb0>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a1a      	ldr	r2, [pc, #104]	; (8007258 <TIM_OC4_SetConfig+0x10c>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d003      	beq.n	80071fc <TIM_OC4_SetConfig+0xb0>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a19      	ldr	r2, [pc, #100]	; (800725c <TIM_OC4_SetConfig+0x110>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d113      	bne.n	8007224 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007202:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800720a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	019b      	lsls	r3, r3, #6
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	4313      	orrs	r3, r2
 8007216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	019b      	lsls	r3, r3, #6
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4313      	orrs	r3, r2
 8007222:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	621a      	str	r2, [r3, #32]
}
 800723e:	bf00      	nop
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	40012c00 	.word	0x40012c00
 8007250:	40013400 	.word	0x40013400
 8007254:	40014000 	.word	0x40014000
 8007258:	40014400 	.word	0x40014400
 800725c:	40014800 	.word	0x40014800

08007260 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800728e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80072a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	041b      	lsls	r3, r3, #16
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a17      	ldr	r2, [pc, #92]	; (8007314 <TIM_OC5_SetConfig+0xb4>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d00f      	beq.n	80072da <TIM_OC5_SetConfig+0x7a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a16      	ldr	r2, [pc, #88]	; (8007318 <TIM_OC5_SetConfig+0xb8>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d00b      	beq.n	80072da <TIM_OC5_SetConfig+0x7a>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a15      	ldr	r2, [pc, #84]	; (800731c <TIM_OC5_SetConfig+0xbc>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d007      	beq.n	80072da <TIM_OC5_SetConfig+0x7a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a14      	ldr	r2, [pc, #80]	; (8007320 <TIM_OC5_SetConfig+0xc0>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d003      	beq.n	80072da <TIM_OC5_SetConfig+0x7a>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a13      	ldr	r2, [pc, #76]	; (8007324 <TIM_OC5_SetConfig+0xc4>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d109      	bne.n	80072ee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	021b      	lsls	r3, r3, #8
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	621a      	str	r2, [r3, #32]
}
 8007308:	bf00      	nop
 800730a:	371c      	adds	r7, #28
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	40012c00 	.word	0x40012c00
 8007318:	40013400 	.word	0x40013400
 800731c:	40014000 	.word	0x40014000
 8007320:	40014400 	.word	0x40014400
 8007324:	40014800 	.word	0x40014800

08007328 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800735a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	021b      	lsls	r3, r3, #8
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	4313      	orrs	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800736e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	051b      	lsls	r3, r3, #20
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	4313      	orrs	r3, r2
 800737a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a18      	ldr	r2, [pc, #96]	; (80073e0 <TIM_OC6_SetConfig+0xb8>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d00f      	beq.n	80073a4 <TIM_OC6_SetConfig+0x7c>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a17      	ldr	r2, [pc, #92]	; (80073e4 <TIM_OC6_SetConfig+0xbc>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00b      	beq.n	80073a4 <TIM_OC6_SetConfig+0x7c>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a16      	ldr	r2, [pc, #88]	; (80073e8 <TIM_OC6_SetConfig+0xc0>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d007      	beq.n	80073a4 <TIM_OC6_SetConfig+0x7c>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a15      	ldr	r2, [pc, #84]	; (80073ec <TIM_OC6_SetConfig+0xc4>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d003      	beq.n	80073a4 <TIM_OC6_SetConfig+0x7c>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a14      	ldr	r2, [pc, #80]	; (80073f0 <TIM_OC6_SetConfig+0xc8>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d109      	bne.n	80073b8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	029b      	lsls	r3, r3, #10
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	621a      	str	r2, [r3, #32]
}
 80073d2:	bf00      	nop
 80073d4:	371c      	adds	r7, #28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	40012c00 	.word	0x40012c00
 80073e4:	40013400 	.word	0x40013400
 80073e8:	40014000 	.word	0x40014000
 80073ec:	40014400 	.word	0x40014400
 80073f0:	40014800 	.word	0x40014800

080073f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	f023 0201 	bic.w	r2, r3, #1
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800741e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	011b      	lsls	r3, r3, #4
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	4313      	orrs	r3, r2
 8007428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f023 030a 	bic.w	r3, r3, #10
 8007430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	4313      	orrs	r3, r2
 8007438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	621a      	str	r2, [r3, #32]
}
 8007446:	bf00      	nop
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007452:	b480      	push	{r7}
 8007454:	b087      	sub	sp, #28
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	f023 0210 	bic.w	r2, r3, #16
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800747c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	031b      	lsls	r3, r3, #12
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	4313      	orrs	r3, r2
 8007486:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800748e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	4313      	orrs	r3, r2
 8007498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	621a      	str	r2, [r3, #32]
}
 80074a6:	bf00      	nop
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80074c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	f043 0307 	orr.w	r3, r3, #7
 80074d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	609a      	str	r2, [r3, #8]
}
 80074e0:	bf00      	nop
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	021a      	lsls	r2, r3, #8
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	431a      	orrs	r2, r3
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	4313      	orrs	r3, r2
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	4313      	orrs	r3, r2
 8007518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	609a      	str	r2, [r3, #8]
}
 8007520:	bf00      	nop
 8007522:	371c      	adds	r7, #28
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800752c:	b480      	push	{r7}
 800752e:	b087      	sub	sp, #28
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	f003 031f 	and.w	r3, r3, #31
 800753e:	2201      	movs	r2, #1
 8007540:	fa02 f303 	lsl.w	r3, r2, r3
 8007544:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6a1a      	ldr	r2, [r3, #32]
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	43db      	mvns	r3, r3
 800754e:	401a      	ands	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6a1a      	ldr	r2, [r3, #32]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	f003 031f 	and.w	r3, r3, #31
 800755e:	6879      	ldr	r1, [r7, #4]
 8007560:	fa01 f303 	lsl.w	r3, r1, r3
 8007564:	431a      	orrs	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	621a      	str	r2, [r3, #32]
}
 800756a:	bf00      	nop
 800756c:	371c      	adds	r7, #28
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
	...

08007578 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d109      	bne.n	800759c <HAL_TIMEx_PWMN_Start+0x24>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b01      	cmp	r3, #1
 8007592:	bf14      	ite	ne
 8007594:	2301      	movne	r3, #1
 8007596:	2300      	moveq	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	e022      	b.n	80075e2 <HAL_TIMEx_PWMN_Start+0x6a>
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d109      	bne.n	80075b6 <HAL_TIMEx_PWMN_Start+0x3e>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	bf14      	ite	ne
 80075ae:	2301      	movne	r3, #1
 80075b0:	2300      	moveq	r3, #0
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	e015      	b.n	80075e2 <HAL_TIMEx_PWMN_Start+0x6a>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b08      	cmp	r3, #8
 80075ba:	d109      	bne.n	80075d0 <HAL_TIMEx_PWMN_Start+0x58>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	bf14      	ite	ne
 80075c8:	2301      	movne	r3, #1
 80075ca:	2300      	moveq	r3, #0
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	e008      	b.n	80075e2 <HAL_TIMEx_PWMN_Start+0x6a>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b01      	cmp	r3, #1
 80075da:	bf14      	ite	ne
 80075dc:	2301      	movne	r3, #1
 80075de:	2300      	moveq	r3, #0
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e069      	b.n	80076be <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d104      	bne.n	80075fa <HAL_TIMEx_PWMN_Start+0x82>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075f8:	e013      	b.n	8007622 <HAL_TIMEx_PWMN_Start+0xaa>
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	2b04      	cmp	r3, #4
 80075fe:	d104      	bne.n	800760a <HAL_TIMEx_PWMN_Start+0x92>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007608:	e00b      	b.n	8007622 <HAL_TIMEx_PWMN_Start+0xaa>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b08      	cmp	r3, #8
 800760e:	d104      	bne.n	800761a <HAL_TIMEx_PWMN_Start+0xa2>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007618:	e003      	b.n	8007622 <HAL_TIMEx_PWMN_Start+0xaa>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2202      	movs	r2, #2
 800761e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2204      	movs	r2, #4
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	4618      	mov	r0, r3
 800762c:	f000 f9ac 	bl	8007988 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800763e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a20      	ldr	r2, [pc, #128]	; (80076c8 <HAL_TIMEx_PWMN_Start+0x150>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d018      	beq.n	800767c <HAL_TIMEx_PWMN_Start+0x104>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007652:	d013      	beq.n	800767c <HAL_TIMEx_PWMN_Start+0x104>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a1c      	ldr	r2, [pc, #112]	; (80076cc <HAL_TIMEx_PWMN_Start+0x154>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d00e      	beq.n	800767c <HAL_TIMEx_PWMN_Start+0x104>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a1b      	ldr	r2, [pc, #108]	; (80076d0 <HAL_TIMEx_PWMN_Start+0x158>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d009      	beq.n	800767c <HAL_TIMEx_PWMN_Start+0x104>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a19      	ldr	r2, [pc, #100]	; (80076d4 <HAL_TIMEx_PWMN_Start+0x15c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d004      	beq.n	800767c <HAL_TIMEx_PWMN_Start+0x104>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a18      	ldr	r2, [pc, #96]	; (80076d8 <HAL_TIMEx_PWMN_Start+0x160>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d115      	bne.n	80076a8 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689a      	ldr	r2, [r3, #8]
 8007682:	4b16      	ldr	r3, [pc, #88]	; (80076dc <HAL_TIMEx_PWMN_Start+0x164>)
 8007684:	4013      	ands	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b06      	cmp	r3, #6
 800768c:	d015      	beq.n	80076ba <HAL_TIMEx_PWMN_Start+0x142>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007694:	d011      	beq.n	80076ba <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f042 0201 	orr.w	r2, r2, #1
 80076a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a6:	e008      	b.n	80076ba <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f042 0201 	orr.w	r2, r2, #1
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	e000      	b.n	80076bc <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	40012c00 	.word	0x40012c00
 80076cc:	40000400 	.word	0x40000400
 80076d0:	40000800 	.word	0x40000800
 80076d4:	40013400 	.word	0x40013400
 80076d8:	40014000 	.word	0x40014000
 80076dc:	00010007 	.word	0x00010007

080076e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d101      	bne.n	80076f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076f4:	2302      	movs	r3, #2
 80076f6:	e065      	b.n	80077c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a2c      	ldr	r2, [pc, #176]	; (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d004      	beq.n	800772c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a2b      	ldr	r2, [pc, #172]	; (80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d108      	bne.n	800773e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007732:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	4313      	orrs	r3, r2
 800773c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007748:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	4313      	orrs	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a1b      	ldr	r2, [pc, #108]	; (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d018      	beq.n	8007798 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776e:	d013      	beq.n	8007798 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a18      	ldr	r2, [pc, #96]	; (80077d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d00e      	beq.n	8007798 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a17      	ldr	r2, [pc, #92]	; (80077dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d009      	beq.n	8007798 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a12      	ldr	r2, [pc, #72]	; (80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d004      	beq.n	8007798 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a13      	ldr	r2, [pc, #76]	; (80077e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d10c      	bne.n	80077b2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800779e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	40012c00 	.word	0x40012c00
 80077d4:	40013400 	.word	0x40013400
 80077d8:	40000400 	.word	0x40000400
 80077dc:	40000800 	.word	0x40000800
 80077e0:	40014000 	.word	0x40014000

080077e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d101      	bne.n	8007800 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80077fc:	2302      	movs	r3, #2
 80077fe:	e073      	b.n	80078e8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	4313      	orrs	r3, r2
 8007814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	4313      	orrs	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4313      	orrs	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	4313      	orrs	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	4313      	orrs	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	041b      	lsls	r3, r3, #16
 8007876:	4313      	orrs	r3, r2
 8007878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	69db      	ldr	r3, [r3, #28]
 8007884:	4313      	orrs	r3, r2
 8007886:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a19      	ldr	r2, [pc, #100]	; (80078f4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d004      	beq.n	800789c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a18      	ldr	r2, [pc, #96]	; (80078f8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d11c      	bne.n	80078d6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a6:	051b      	lsls	r3, r3, #20
 80078a8:	4313      	orrs	r3, r2
 80078aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	4313      	orrs	r3, r2
 80078c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d2:	4313      	orrs	r3, r2
 80078d4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	40012c00 	.word	0x40012c00
 80078f8:	40013400 	.word	0x40013400

080078fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	f003 030f 	and.w	r3, r3, #15
 800799a:	2204      	movs	r2, #4
 800799c:	fa02 f303 	lsl.w	r3, r2, r3
 80079a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6a1a      	ldr	r2, [r3, #32]
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	43db      	mvns	r3, r3
 80079aa:	401a      	ands	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6a1a      	ldr	r2, [r3, #32]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f003 030f 	and.w	r3, r3, #15
 80079ba:	6879      	ldr	r1, [r7, #4]
 80079bc:	fa01 f303 	lsl.w	r3, r1, r3
 80079c0:	431a      	orrs	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	621a      	str	r2, [r3, #32]
}
 80079c6:	bf00      	nop
 80079c8:	371c      	adds	r7, #28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
	...

080079d4 <__errno>:
 80079d4:	4b01      	ldr	r3, [pc, #4]	; (80079dc <__errno+0x8>)
 80079d6:	6818      	ldr	r0, [r3, #0]
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	2000000c 	.word	0x2000000c

080079e0 <__libc_init_array>:
 80079e0:	b570      	push	{r4, r5, r6, lr}
 80079e2:	4d0d      	ldr	r5, [pc, #52]	; (8007a18 <__libc_init_array+0x38>)
 80079e4:	4c0d      	ldr	r4, [pc, #52]	; (8007a1c <__libc_init_array+0x3c>)
 80079e6:	1b64      	subs	r4, r4, r5
 80079e8:	10a4      	asrs	r4, r4, #2
 80079ea:	2600      	movs	r6, #0
 80079ec:	42a6      	cmp	r6, r4
 80079ee:	d109      	bne.n	8007a04 <__libc_init_array+0x24>
 80079f0:	4d0b      	ldr	r5, [pc, #44]	; (8007a20 <__libc_init_array+0x40>)
 80079f2:	4c0c      	ldr	r4, [pc, #48]	; (8007a24 <__libc_init_array+0x44>)
 80079f4:	f000 f8c2 	bl	8007b7c <_init>
 80079f8:	1b64      	subs	r4, r4, r5
 80079fa:	10a4      	asrs	r4, r4, #2
 80079fc:	2600      	movs	r6, #0
 80079fe:	42a6      	cmp	r6, r4
 8007a00:	d105      	bne.n	8007a0e <__libc_init_array+0x2e>
 8007a02:	bd70      	pop	{r4, r5, r6, pc}
 8007a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a08:	4798      	blx	r3
 8007a0a:	3601      	adds	r6, #1
 8007a0c:	e7ee      	b.n	80079ec <__libc_init_array+0xc>
 8007a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a12:	4798      	blx	r3
 8007a14:	3601      	adds	r6, #1
 8007a16:	e7f2      	b.n	80079fe <__libc_init_array+0x1e>
 8007a18:	080083ac 	.word	0x080083ac
 8007a1c:	080083ac 	.word	0x080083ac
 8007a20:	080083ac 	.word	0x080083ac
 8007a24:	080083b0 	.word	0x080083b0

08007a28 <memset>:
 8007a28:	4402      	add	r2, r0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d100      	bne.n	8007a32 <memset+0xa>
 8007a30:	4770      	bx	lr
 8007a32:	f803 1b01 	strb.w	r1, [r3], #1
 8007a36:	e7f9      	b.n	8007a2c <memset+0x4>

08007a38 <fmodf>:
 8007a38:	b508      	push	{r3, lr}
 8007a3a:	ed2d 8b02 	vpush	{d8}
 8007a3e:	eef0 8a40 	vmov.f32	s17, s0
 8007a42:	eeb0 8a60 	vmov.f32	s16, s1
 8007a46:	f000 f817 	bl	8007a78 <__ieee754_fmodf>
 8007a4a:	eef4 8a48 	vcmp.f32	s17, s16
 8007a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a52:	d60c      	bvs.n	8007a6e <fmodf+0x36>
 8007a54:	eddf 8a07 	vldr	s17, [pc, #28]	; 8007a74 <fmodf+0x3c>
 8007a58:	eeb4 8a68 	vcmp.f32	s16, s17
 8007a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a60:	d105      	bne.n	8007a6e <fmodf+0x36>
 8007a62:	f7ff ffb7 	bl	80079d4 <__errno>
 8007a66:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007a6a:	2321      	movs	r3, #33	; 0x21
 8007a6c:	6003      	str	r3, [r0, #0]
 8007a6e:	ecbd 8b02 	vpop	{d8}
 8007a72:	bd08      	pop	{r3, pc}
 8007a74:	00000000 	.word	0x00000000

08007a78 <__ieee754_fmodf>:
 8007a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a7a:	ee10 5a90 	vmov	r5, s1
 8007a7e:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8007a82:	d009      	beq.n	8007a98 <__ieee754_fmodf+0x20>
 8007a84:	ee10 2a10 	vmov	r2, s0
 8007a88:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007a8c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007a90:	da02      	bge.n	8007a98 <__ieee754_fmodf+0x20>
 8007a92:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007a96:	dd04      	ble.n	8007aa2 <__ieee754_fmodf+0x2a>
 8007a98:	ee60 0a20 	vmul.f32	s1, s0, s1
 8007a9c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8007aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aa2:	42a3      	cmp	r3, r4
 8007aa4:	dbfc      	blt.n	8007aa0 <__ieee754_fmodf+0x28>
 8007aa6:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8007aaa:	d105      	bne.n	8007ab8 <__ieee754_fmodf+0x40>
 8007aac:	4b32      	ldr	r3, [pc, #200]	; (8007b78 <__ieee754_fmodf+0x100>)
 8007aae:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8007ab2:	ed93 0a00 	vldr	s0, [r3]
 8007ab6:	e7f3      	b.n	8007aa0 <__ieee754_fmodf+0x28>
 8007ab8:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8007abc:	d13f      	bne.n	8007b3e <__ieee754_fmodf+0xc6>
 8007abe:	0219      	lsls	r1, r3, #8
 8007ac0:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8007ac4:	2900      	cmp	r1, #0
 8007ac6:	dc37      	bgt.n	8007b38 <__ieee754_fmodf+0xc0>
 8007ac8:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8007acc:	d13d      	bne.n	8007b4a <__ieee754_fmodf+0xd2>
 8007ace:	0227      	lsls	r7, r4, #8
 8007ad0:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8007ad4:	2f00      	cmp	r7, #0
 8007ad6:	da35      	bge.n	8007b44 <__ieee754_fmodf+0xcc>
 8007ad8:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8007adc:	bfbb      	ittet	lt
 8007ade:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8007ae2:	1a12      	sublt	r2, r2, r0
 8007ae4:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8007ae8:	4093      	lsllt	r3, r2
 8007aea:	bfa8      	it	ge
 8007aec:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8007af0:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8007af4:	bfb5      	itete	lt
 8007af6:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8007afa:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8007afe:	1a52      	sublt	r2, r2, r1
 8007b00:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8007b04:	bfb8      	it	lt
 8007b06:	4094      	lsllt	r4, r2
 8007b08:	1a40      	subs	r0, r0, r1
 8007b0a:	1b1a      	subs	r2, r3, r4
 8007b0c:	bb00      	cbnz	r0, 8007b50 <__ieee754_fmodf+0xd8>
 8007b0e:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8007b12:	bf38      	it	cc
 8007b14:	4613      	movcc	r3, r2
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d0c8      	beq.n	8007aac <__ieee754_fmodf+0x34>
 8007b1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b1e:	db1f      	blt.n	8007b60 <__ieee754_fmodf+0xe8>
 8007b20:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8007b24:	db1f      	blt.n	8007b66 <__ieee754_fmodf+0xee>
 8007b26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8007b2a:	317f      	adds	r1, #127	; 0x7f
 8007b2c:	4333      	orrs	r3, r6
 8007b2e:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8007b32:	ee00 3a10 	vmov	s0, r3
 8007b36:	e7b3      	b.n	8007aa0 <__ieee754_fmodf+0x28>
 8007b38:	3801      	subs	r0, #1
 8007b3a:	0049      	lsls	r1, r1, #1
 8007b3c:	e7c2      	b.n	8007ac4 <__ieee754_fmodf+0x4c>
 8007b3e:	15d8      	asrs	r0, r3, #23
 8007b40:	387f      	subs	r0, #127	; 0x7f
 8007b42:	e7c1      	b.n	8007ac8 <__ieee754_fmodf+0x50>
 8007b44:	3901      	subs	r1, #1
 8007b46:	007f      	lsls	r7, r7, #1
 8007b48:	e7c4      	b.n	8007ad4 <__ieee754_fmodf+0x5c>
 8007b4a:	15e1      	asrs	r1, r4, #23
 8007b4c:	397f      	subs	r1, #127	; 0x7f
 8007b4e:	e7c3      	b.n	8007ad8 <__ieee754_fmodf+0x60>
 8007b50:	2a00      	cmp	r2, #0
 8007b52:	da02      	bge.n	8007b5a <__ieee754_fmodf+0xe2>
 8007b54:	005b      	lsls	r3, r3, #1
 8007b56:	3801      	subs	r0, #1
 8007b58:	e7d7      	b.n	8007b0a <__ieee754_fmodf+0x92>
 8007b5a:	d0a7      	beq.n	8007aac <__ieee754_fmodf+0x34>
 8007b5c:	0053      	lsls	r3, r2, #1
 8007b5e:	e7fa      	b.n	8007b56 <__ieee754_fmodf+0xde>
 8007b60:	005b      	lsls	r3, r3, #1
 8007b62:	3901      	subs	r1, #1
 8007b64:	e7d9      	b.n	8007b1a <__ieee754_fmodf+0xa2>
 8007b66:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8007b6a:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8007b6e:	3182      	adds	r1, #130	; 0x82
 8007b70:	410b      	asrs	r3, r1
 8007b72:	4333      	orrs	r3, r6
 8007b74:	e7dd      	b.n	8007b32 <__ieee754_fmodf+0xba>
 8007b76:	bf00      	nop
 8007b78:	080083a4 	.word	0x080083a4

08007b7c <_init>:
 8007b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7e:	bf00      	nop
 8007b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b82:	bc08      	pop	{r3}
 8007b84:	469e      	mov	lr, r3
 8007b86:	4770      	bx	lr

08007b88 <_fini>:
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	bf00      	nop
 8007b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b8e:	bc08      	pop	{r3}
 8007b90:	469e      	mov	lr, r3
 8007b92:	4770      	bx	lr
